{
    "transcript": "C# , an object oriented programming language created by Microsoft. It was first released in 2000, and its development was led by Anders Hejlsberg. Microsoft designed C# to be modern, easy to use, and tightly integrated with its .NET Framework C# was made to provide the same benefits as Java simplicity and platform flexibility but with tighter integration into the Microsoft ecosystem The .NET framework consists of two main components the Common Language Runtime CLR and the class library The class library provides reusable code making it easier to build various types of applications. Before C-sharp, we had C and C++ in the C family. When compiling C or C++ programs, the compiler translates the code directly into machine specific instructions. This means if you compile a C++ program on Windows, you will need to recompile it for Linux to run it. As the machine code is platform independent, C Sharp introduces a different approach. When you compile C-sharp code, it is converted into intermediate language code. Similar to Java's bytecode, the CLR then translates this into machine code at runtime based on the specific machine it is running on This process is known as just in time compilation. This allows C-sharp to be more flexible across different platforms today C-sharp is used in various areas from building web applications like StackOverflow to developing video games using the Unity engine to get started with C-sharp. First, we need to download Visual Studio and install these two packages. After that, we can either run C-sharp in Visual Studio or Visual Studio Code In VS Code First, we create a project using this command which creates this basic file structure for our project. A C# file ends with .cs extension. We write our code in this file. This one contains details about our project and obj folder temporary stores the build file created when we run our code. This line prints Hello world in our terminal to run our C-sharp program. We use this command dotnet run and we see Hello World printed in our terminal. Some of you might wonder where is the main function? Well, this is the basic structure of the C-sharp program. First, we use the using keyword to include a namespace that we want to use. Like here the system namespace a namespace contains multiple classes This Console class is part of this system namespace. Then we declare our own namespace. You can name it anything and then declare a class with any name that you like. Just like namespace contains multiple classes. A class contains multiple functions. And in this class we have our main function with return type void which means our function is not returning anything And static means this main function can be called without creating the object of our class. And this string args is used to pass command line arguments. And then in this main function, or we can say method because functions and methods are same. But when we declare a function inside a class, we call it a method So in our main method we are using WriteLine method to print hello world in our terminal and this WriteLine method is in this Console class and Console class is in the System namespace So this is the basic structure of a C# program that prints hello world in our terminal. But we can do the same using this single line In C# V9 Top level statements feature was introduced in this feature the compiler automatically generates this basic structure, including all this main function and namespace when we write simple statements like this commenting in C-sharp is same as the other languages in this C family For single line comments, we use two forward slashes and for multi-line comment we use forward slash star at the start of the comment and star forward slash at the end of the comment to declare a variable first we write the data type and then our variable name and then the value that we want to assign For example here the datatype is string, the variable name is message and our value is hello world and then we can pass that variable to our WriteLine method to print the value of that variable and yeah don't forget this semicolon At the end of every statement we write semicolon in C-sharp. Now let's see some common data types in C-sharp. The first is int which is used to store whole numbers and its range is 2 billion -2 billion +2 billion but if you're storing a number greater than 2 billion, you can use long It’s size is eight bytes, double the size of an int So it's range is 9 quintillion and to store long number we use long keyword then we have float which is used to store decimal numbers with the precision of 6 to 7 decimal digits When declaring a float value, we write F at the end of the value to tell the compiler that it is a float value, then we have double it also stores decimal number, but its precision is up to 15 decimal digits So if you're doing some calculation where precision matters, then you can use double. After this we have boolean, which stores only two value that is true or false To declare a boolean, we used the bool keyword then there is char which is used to store a single character After this we have string which stores multiple characters in a sequence. For example, this message Then we have Array, which stores multiple items of the same data type declaring an array is so simple. First, we write the data type and then the square brackets and then the array name and then in this curly braces we can write our values. If you don't want to assign the value while declaring an array, what you can do is first write the data type square brackets array name and then use the new keyword data type again and then in square brackets the size of your array like this five means we can store five elements in this array and then to insert value in that array we can use the array name and in square brackets the position Since counting starts from zero, the index of the first position will be zero that is why I am writing zero and then your value and in the same way we can store multiple values in our array and the same applies for accessing the array elements. First, we write the array name and in square bracket the position of the element that we want to access And now we see our array elements in the terminal Now let's see some decision making statements The first one is if statement It is so simple, but before that, have a look at this code here first I’m writing enter the magic number in the terminal and then with this ReadLine method, I'm taking input from the user and storing it in the input variable This method returns the input as a string data type, but I want a number. So I'm using this parse method from int to convert that string into the int data type and I'm storing that value in this number variable. Now let's write an if statement. First we write if and in this parentheses we write our condition and the code to run in curly braces If that condition will be true, the code in curly braces will be executed. So let's enter a number 42 and we see our message. But if I will enter any number except 42, we won't see anything because we have not written what to do if the condition is false? For that we can add an else statement that will execute if the if condition is false And now we see the message from the else statement because the given number is not equal to magic number, then we have if elseif statement, which is used to check multiple conditions, if the first condition is false, then the second condition will be checked and if it is false, then the third one and if it is also false, then the next one until we find a condition that is true or an else statement After this, we have switch statement. It is an alternative to an else if statement to declare an switch statement, first we add switch and then we pass our variable that we are going to compare. After that, in curly braces we write cases that is conditions using the case keyword first we write case and our condition here it is greater than 80 so if the value of battery level is greater than 80. The code in this case will be executed and at last we write break to break out of this switch statement. And in the same way, we can write multiple cases and the default case which will execute if none of the cases are true here since battery level is 30 this greater than 20 case is true That's why the code from this case is executed. Now let's look at loops. The first one is for loop to write an for loop in parentheses First we initialize the variable and then write the condition and then increment or decrement that variable. And in curly braces we write the code to be repeated. For example, first we declare a variable that is int i equals zero and our condition is i less then five So this for loop will run as long as the i is less than five and then we write i++ So after every loop the value of i will be incremented and we will print the value of i in each loop After this we have while loop this loop runs as long as the condition is true, just write the condition in parenthesis and your code in curly braces and it will run as long as the condition is true. Then we have do while loop which is like a brother of while loop here first we write do and the code to execute and then the while and the condition this do while loop make sure that our code runs at least once even though the condition is not satisfied because here first the code runs and then the condition is checked After this we have for each loop this loop is used to loop over the elements of an array first we write for each and then we declare a variable of the same data type as the array and then we write the in keyword and the array name. And in curly braces, we write the code to execute. Here we are accessing each element from the array and then we are printing it Now it's time for function to declare a function first we write the written type void means it returns nothing, and then we write the function name and in parentheses we can pass any parameters or we can just leave it empty. Then in curly braces we write our code to execute when this function is called After that to call a function, we write the function name and then the parentheses, and now the code from our function is executed"
}