{
    "transcript": "so welcome to this course today we're going to start with C++ and let's just do the C++ course in 1 hour the target is let's learn C++ basics in one hour I'm going to use W3 schools website as a reference a quick disclaimer I'm not being sponsored or this is not an official W3 schools website I just love using this websites and since when we teach we need notes and materials and reference I thought what's the best then we can use let's use this best website so that you have a material to go with and you can follow along and then later on learn with it so you already have NS access this website free of cost amazing website my name is dran Budi let's start with C++ and let's try to cover the basics within one hour so now why we need C++ again it's a very popular language it's comes to computer programs you write tons of things it's one of the most amazing and popular languages around the world it has tons of uses and functionality so you can read about it in this website but if you're already here you want to know what C++ is and you want to learn because it develops the fundamental programming Concepts and if you want to become a software engineer software developer programmer I highly recommend knowing the basics and understanding the basics of C++ because it allows you to understand how internally computer works there's no other language that will develop your Concepts as strongly as understanding C++ that's why every major degree program across the world will use C++ to for that purpose it's I mean it's not important that how much use you can get out of it it's that that C++ will use your understanding and develop your understanding so it's just like C++ is helping you in understanding and building the logic so that's my key reason so other reasons technical can be many things you can read through this this is fantastic but knowing C++ will allow you to understand the logic and how basically programming is working and then once you understand those fundamental concepts you can very easily build on it and you can learn Java python C++ other C languages and whatever you go the fundamental concepts of C++ are just there everywhere and it's it's amazing to learn so let's get started with it so the B first thing we do with C++ is understanding the basic synex okay so the basic synex is that we write hash include iostream using namespace STD now there's a confusion I will talk a little bit more about this in a moment don't worry about us iner main block start block close and then C and when we run this code basically it runs hello world now the reason I love W3 school's website is that again you can very easily run this code online and you get examples at the same time so here we go so we have a Hello World printed on it now What's happen in this code what exactly we mean here there are a bunch of things that we need to understand how a program is working the first thing we need to do is this hash include what's exactly is that hash include is basically what we call a header file or in other words a library file imagine that you have tons of code already written for you but then in order to use it you need to refer that code now you cannot go and search for those codes individually so all you need to do is you need to include that reference in your program so since we are using some built-in functions so we need to understand that how these functions are going to go the compiler the backend system basically needs to understand so how this see out is going to behave the information is actually already written and coded inside this IO stream this is an iost stream file this is actually what we refer to in programming as a header file it's like a library it's like a books that already exists in the library so you don't have to open and find out each individual page you just refer it here and then all the contents of that file and of the book are already Incorporated Creed within your code so when we write hash include we are telling our compiler in this case let me use the word system till I explain what compiler is we're telling our system that hey I'm including a library file called iostream so whatever code is written here now becomes part of my code okay so whatever code the system is written here becomes part of my code as well understand that so it's very simple it's like we already defining hey this is my hierarchy this is my parent so all property and information of my parent are now automatically inherited and given to me so I can very easily use it right just like your father's money all your father's money you have imported it now you can very easily use it you don't have to do anything else because you have used the hash include you have included this header file okay then we call this using namespace STD now there are different opinions within the programming Community some people use it there is a opinion that let's not use STD directly because it just complicates the code I will explain a little bit in a more detail later on but now at this moment what using Nam space STD means that we can use names for objects and variables from our standard Library okay so this basically means that we are using a names from our standard Library so the names such as see out or other things we are using we are basically using from our standard Library so this is where basically it's like an instruction to the system the backend system that is running this code okay so whenever we write the back system is giving us an output so we giving instructions to that output okay this backend system I will talk in a moment so this is what using name space does there's another way of doing it as well you can write STD double colum directly here and then you don't need to write this um at the head of fine but some people just prefer to use it here rather than writing it again and again and again throughout the code or sometimes people just say hey just just just used later on so in other words I can say that I can come here and I can write STD double column so this also works so this now means that I'm using an STD uh standard Library word of C out okay this should also work if I'm don't use this as well but again this means that every time I write a c out I have to write this line of code before it it becomes like a prefix so instead of writing something again and again certain people prefer using this ones sometimes you would find code using this one as well basically there is a difference again the but I willess it I will explain a little bit more in detail how the system is working than few things would make sense so for now we just sticking with the using this uh namespace STD now do remember because C++ is a programming language by programming language means we write a code that gives instruction to our system to our computer so that instructions have to be very specific and standard order so that's why hash include always goes at the first line of code these are header files they always should be written at the top initially after that you write using namespace STD so this again goes after hash include then we write something called integer main integer basically means a return type and we have something called main now what this basically means is that hey I have a main function this is a function it behaves like a function meaning it's a block of code because it's a block of code we give block start and block close now again let me explain this in a simple way when we write a programming language we give certain set of instructions usually one instruction two instruction or it can be 100 lines of code and then we group those code together under a what we call a block of code and then we name this as a function okay so there can be 100 lines of code inside this particular block 100 instructions to the computer that's what basically a software is a coding basically means that we are giving instructions to our computer to do a certain task okay so that instructions usually can be multiple instructions so in a simple sense we basically write those instructions inside a block because there can be separate different blocks we can have a different blocks doing separate different individual tasks okay so that's why we Define this block and in programming the block is defined with these curly brackets we start with the curly bracket and we end with the curly bracket then wonderful then because this is a block of code it's important to give it a name so that we can reuse this name again and again so there can be multiple blocks for example if you're doing adding or subtraction so we want to call that function again and again and that block of code again and again to do addition as many times as we want so that's why if having giving it a name is quite important so that's what we do here main is basically a name of a function and the syntax goes that when you define a function you use these round brackets using these round brackets basically will identify that hey this is a particular function because then you can do lots of other things for example you have written C out return what exactly they mean they don't have blocks but if it was supposed to be a function it needs to have these brackets okay so a block of code becomes a function having a name and round brackets so that's how we identify what exactly we doing in our code then this again prefix with something called integer now as I said um in integer U this is a block of code block of code means set of instructions something that we have told our system to do in this case print the output called hello world now because this is a set of instructions usually what happens is that when we give an instruction the system will also give a respon response back to us it's like asking a question and then getting a reply so if I'm asking a question I might need a reply okay or for example if I ask somebody to hey go and pick up that thing from the table so that means that go to the table pick it up and then come back and give it to me or fetch me a glass of water so I'm asking and giving some instructions that go to the fridge give me a fresh water of uh water right glass of water so that means that they get the water and then they return back so that return back means they bring the water back to me that is what basically this return means so this means that when this function executes as a process of its execution it will return as something called integer now what exactly is integer we're going to talk a little bit more about it in data types but integer means the value of data everything that we put inside of a computer is considered as a data and there's a various different types of data whether it's a number whether it's a decimal number whether it's a character a BC D or whether it's just a string all right so these are like four main things and then true and false becomes Boolean these are what the basic data that we use within our systems so we're going to tell everything because again this is a dumb thing we are writing a code so computer is returning something so it wants to know that hey when I return something what do you want as a return type what type of data you want to reply what kind of answer you want do you want a yes or no your name or do you want a glass of water or do you want a bottle of water you know so we expecting certain type of answer so writing a return type means we're telling our system hey I need an integer as a return type Kish okay so now because we are writing an integer that means that inside my instructions I need to give that answer back okay so when I say hey I need an integer as a return type integer basically means a number so it means that I'm expecting a number to be returned as a reply as an answer when this function gets executed so how do we return number we use a word called return how do we send a reply how do we give an answer in programming we use a word called return that's what this return is doing okay so it says return zero that means currently I don't have no answer I have just printed this word this is a basic program so because there is no answer and this method expects a reply so I'm saying hey return zero means just this empty number again zero basically means nothing at this moment right so this is why this there's a zero and there's a return here so we have a function it's a block of code means it's set of instructions it executes when it executes IT expecting an integer number as an answer so that expectation is met with a return zero value okay so by writing this return zero we are saying hey when you execute I'm returning this answer to you as a zero thing hopefully that clarifies the things then finally we come to the C out now see out basically is an IO stream as a function that kind of a function that basically Works internally to print the output on the the console so this hello world string that we see on our console is basically printed through this see out function so when we write see out double uh callon angle brackets inverted quotation marks hello world basically we are telling our system that hey I want this string to be output so this is like a console output so we're getting a console output on our console window saying hello world okay so this is what is is so C out is simply using uh is a is a type of a function that simply prints this string on our console okay I hope that makes a little bit more sense so it is basically uh is what it just called is an object used together with an insertion operator so these double angle brackets are known as insertion operators okay this means we are inserting the string onto this console output inverted quotations because this is a string there is no inverted quotations here because this is a number numbers do not need inverted quotations at this moment right you can write a number inside inverted quotations as well so at this time we are not using inverted quotations because this is a number number can be used without inverted quotations here this is a string compl string basically means number of characters so this uh insertion operator after that we write inverted quotation marks inside the inverted quotations we have written the string that we want to generate the output now one other thing do not is that we have used the semicolon here and a semicolon here but there's no semicolon here semicolon basically marks the end of a statement okay end of a statement now do mark this word statement means a single line of code right in programming we use the word statement a lot it typically means a single line of code so when I write C out angle brackets or insertion operator hello world exclamation mark this basically means this is a single line of code then return zero this is another single line of code using name space semicolon this is another single line of code hash include does not have a semicolon why is that because this is just an instruction it proceeds with hash it means that I'm referring to something else it's not an instruction for a computer to do a specific task okay it's not doing any specific task it's just referring to an external Library so that's why there's no semicolon here so do mind be mindful of that some statements will not have a semicolon so for example here this block does not have a semicolon because this is the block of code this block of code is marked with bracket start and then bracket close Okay and then again after closing there's no semicolon so this is a block and block does not need a semicolon a statement needs a semicolon okay so this is a quick rundown of what we write in C++ as a basic code and this is what basically this is trying to explain okay so this is what it's happening now exactly what we mean and how the outputs are being generated so if I come inside the output concept this is what again it's trying to say hey we using the same code so every single code you would see that we are using hash include using Nam space STD integer main bracket start bracket close block start block close C out C down this is the basic program that you will see every time you get and you get a Hello World output now the only thing that I missed out up till this point is that hey why do we use the word main every code that we see every example that we see has something called main inside it why do we need main we need main because it's important because you remember you are writing a software now you're writing a piece of code telling your computer your code your instructions this set of instructions can be thousands of lines can be millions of lines okay now imagine you have a millions of lines you double click on your software to start so every time you double click on a software icon to launch it what line of code should execute first that's the key thing that's the most important aspect of it because a software contains millions of clients what should be my starting point should it be the first line of code and then the second line of code or a specific point is there usually languages like HTML are known as interpreter based line by line in those languages in HTML we the code executes first line Second Line third line fourth line line by line however C++ is a compiler based language what compiler based language means that it the entire code is read by the system and then gets executed so when the entire code is ex read by the system all at once so once you write the entire code then you execute it so this can have 100 lines so if I have 100 lines which line gets executed first because it's not reading line by line it's reading the entire file so when it reads the entire file this main word is basically the starting point so the developers of this l language decided hey which what should be the starting point so they said okay let's just use it main so they just stick with it I think and then every major language uses this main keyword as well so if you go in C language C++ even in Java there's a main function Okay C sh I believe this is also a main function so this main indicates that this is the starting point so no matter what you do you can have billions of lines of code in your system the first time you execute this code or the second time every time you execute the code the first line that gets executed for an SS set of instruction is actually the main method this is where the compiler starts to pick up things and it will automatically go and look for this main method so the compilers have been built the system has been built in a way that it says hey I need this main function so it will automatically go and start the code from here and then it will continue line by line depending on how you have written the code and what these thousands of lines are basically doing and you can have uh nonlinear structure of your coding but the main function is important in that way okay so then it just generates few more lines of code so if I come back here you see STD out and I then I I can say hey let me just use my own line of code I can come back here and I can say let me use more C out now again remember what C out does it generates the output so we can generate output as many times as we want uh let's say welcome to my Channel please subscribe done if I execute this code now execute execute so it says hello welcome to my Channel Please Subscribe right so this is C out it generates the output this is how we write the simple code and we generate the outputs now what happens when I executed the code what is the system okay how does it work what what's happening here so let's try to understand this basic methodology at to understand how system is basically working at back end okay so if you look into this chart here that I've well I've taken from the internet so you can Google it out as well what happens is that uh this is basically giving you the internal structure of how uh C++ code is working okay so whenever we write a simple line of code the we work with C++ is we write we create a source code okay so we we write a simple source code every source code needs to have this standard library and there can be many other Library files by the way so don't be that we only use this Library file there are tons of different Library files that we can use depending on what exactly purpose you want okay so remember C++ is one of the most fundamental languages so major languages have been developed there even your windows and other softwares basically have been developed purely from C++ so it has tons of different files so header files okay so this when we write our source code we have a IO stream and then we've write a code called hello. CPP so I save this code as a CPP extension I have this hash include IO stream and then write my standard code okay now what this basically means that this is my code it includes hash include iostream so this iostream basically refers to an additional file so those both files are now linked to your source code then something happens called pre-processing okay the pre-processing basically means that as soon as I compile the code a pre-processor takes into place it replaces the certain aspect of your iostream code and incorporates it automatically within your file like I said when we include this it means that this source code files are now included with my file so the pre-processor includes the relevant code into your main file it does it automatically we just wrote this we just wrote the include this thing happens automatically so this is what happens with the next phase when we say pre-processor then once the pre-processing is done something calls compiler takes into place now compiler is one of the most important aspect of programming of programs of programming languages okay what is a compiler compiler is is basically um again another piece of software in the general sense it is responsible for reading your source code and converting it into a machine readable file which then is executed on the browser or on the console or on an system in journal okay so majorly we our entire fight is with compiler ensuring that there's no errors no problems no issues the code is fine we always bug with this compiler thing so compiler is basically a software so in this case we call it a C++ compiler it's main responsibility and it's one of the most thing is this is majorly responsible for reading our code finding all the instructions ensuring everything is perfect no errors no mistakes if everything checks out it will give us what we call an executable binary file if there's a problem it will generate error okay and it will not go any further so compiler is like the major order control force that controls whether the source code is correct or not if any problem it will stop if nothing it will allow us to go forward so if there is no problem then something else kicks in there's another phase called Linker this Linker com combines this binary machine code that is generated by compiler so yes compiler reads the code makes sure there's no errors and then it generates something called a binary machine code okay so this in other words it converts our code into a machine readable code okay which which is what we refer to in C++ as binary code so it converts our standard human readable High Lang high level language into a binary machine language code which is then combined with uh machine code and connects with the function calls and this is done by the Linker so in other words the Linker is then finally responsible to read the binary code file and then generate what we call a binary executable file which typically is known as exe orbat file okay um so whenever we see that as we know every Windows system is dependent heavily on exe right so every executable file within Windows is exe so this Linker basically takes this machine readable code and generates an eex executable file which then gets executed on our console so this is how this internal structure of code works we write a source code we include a hash file we put it inside our C++ file we save every file with CPP extension so every file must be saved with CPP extension when we execute it the pre-processor kicks in takes the necessary files from the library and copes them into into our code and passes that files to the compiler compiler is mainly responsible for generating the machine readable code but first it ensures that there's no errors so it comp compiles the code reads the code ensures there's no errors no problems no issues there that's why we call it compiling so it compiles the code if there's no errors it generates what we call them binary code which is is then passed to the Linker which then combines the linkers with additional machine functions and generates what we call the binary executable exe file which then is executed on our console Kish this is what happens here love you guys so now if coming back to our main file this is what basically happens so every time you compile the entire process goes there so every time you run the code basically the code gets compiled if no errors a binary code is generated that binary code is linked into an executable file which then gets executed on our console that's how the C++ internal architecture works now we're going to refer to these words as what we call compiler and we're going to compile the code we're going to execute this code okay wonderful let's move on to the comments now let's start understanding and reading about this C++ little bit more now when we start working with C++ there's something called comments what are comments comments are known as single line comments okay these single line comments in indicate that there within programming there are numerous situations where we don't want certain line of code to get executed so when we write double back slash this means we are writing a comment and I don't want this line to be executed and shown on the output I can write as many comments as I want and other comment okay and I can say hey I want another line of comment so I can say for example please subscribe so this basically means I write another comment and I can say hello uh my name is and then I can say Hello I'm called Dr zishan so for example this becomes my comment so every time we write a double back slash the line gets green again in this case browser but the color doesn't really matter it means that this line of code basically will not be executed by our compiler the compiler completely ignores it okay why because we have used double backs slash so now here note whenever we're doing programming we are using special instructions special characters as you can already see within this code there are various different instructions that we have used okay these instructions okay if I just zoom into it a little bitop okay these instructions in our case are hash again this is a special instruction telling our compiler that I'm going to include this file okay the file name is again included inside these special angle brackets so less than sign greater than sign angle brackets so this angle indicates that I'm writing a file name p then Ang round brackets these round brackets indicate that this is actually a function name name of a main function brackets uh curly brackets curly brackets as we call them these again are special symbol these are special instructions telling our compiler hey this is a block of code this is a function and this is a comment so these special symbols have a huge meaning behind them they're just like a hieroglyphics of Egyptian era if you follow it so these are symbols that represent a particular word or a concept so in this case there are instructions to the compiler that please don't do anything with this line just ignore it this is just comments why we need comments we need comments so that we can uh put instructions in our code do documentation and for whatever purpose okay so this is what it's talking about then we have something called multi-line comments Now multi-line comments basically mean that if I need multiple lines of comments in this case I can say hey um control steric so if I write control static note everything turns into green this basically means that all of these lines of code are basically now commented out oops I can say back with this thing so now what we have done is before these two lines we have written backs slash steric and then at the end we have written static backslash we just reverse these orders now again there are special instructions telling our browse compiler that everything that we have written between these two lines is basically ignored it's supposed to be ignored don't read even though it's a valid C++ code even though it's a valid C++ code but it will be ignored because it's been written inside the comment so that's another use of comments we comment out certain piece of code so when we are writing thousands of lines something will work something will not work and you will come across situations where you want to remove certain lines so this is where comments come into play so back slash steric and steric back slash multi-line comment so using this you can have tons of lines as a comment and then if you use double back slash they become basically a single line comments okay EX excellent let's move forward and get into more details of C++ now when we start working with C++ or for that matter any programming language the key thing that we work with or start with is known as variables what do we exactly mean by variables now what are variables or what are data types so first of all let's just say start with C++ variables variables are containers okay for storing data values that's what basically they are so in other words consider a set of data so for example if I'm working with 2 + 2 so what is two what is plus two in other words let's just come back here and I said hey uh I want to do 2 + 2 so I said 2 + 2 and then I said okay I understand 2 + 2 but if I just write 2+ 2 like this it will give me a problem he said hang on what what do you want to do with this okay so this is a set of data okay okay I said hey let me write a semicolon this again now should be considered as a statement but this is not a valid statement because these are just raw data but the way computers work is that they need to understand how to store the data into our system for that we need containers for that we need something called variables and data types so this is where these variables come into play these data types come into play so we say we use something called integer double character string and Boolean meaning that if I'm using these data types okay let me just close all other things I specify integer and I say for example when variable is equals to 2 +2 so now this basically means that hey I want the 2 + 2 but whatever the answer of these two is I want that answer to be stored in this container in a variable and what type of data what or what type of result it should be it should be of type integer okay so we are specifying three things here we are specifying that there's an operation that I want to perform whatever is the result of that operation equals will basically mean that assign the result of this oper onto this container or inside this container so this result of this will be stored inside this container and because this is a container it needs to know hey what type of data is inside this container the compiler needs to know hey are you working with in numbers or characters or semicolons or true and false so there this are different forms of data that computer handles so this is why we told it hey this is an integer data so these three things the type of data the name of the container and the expression that they want to perform now again here I'm using a word expression means that this is just the part of the larger statement this this is a programming statement inside the statement this is small expression that's being operated executed the value is being saved in a container which is of a type integer so now this becomes the complete statement a programming statement follow me with this hopefully do okay so now let's just talk a little bit more about these containers types so we say we have integer integer means these are a whole numbers so whenever ever we are working with whole numbers we say we are working with integers as a data type so we store this data inside integer variables and then we use numbers for such as 1 2 3 or minus one 2 3 whenever we using numbers as a standard whole numbers we always use integer as a data type however whenever you want to use decimal numbers basically we use something called a double okay so whenever we using decimal numbers we need to use double as a data type so in this case if I use for example uh 2.2 and I say 2.2 now the compiler will say hang on hang on hang on I understand you're you trying to do an expression okay but it says that this is an number form and if I want to print this number form I would say see out go back here and print this variable for me and if I want to execute this code it it will execute the answer for me okay so because we have done the expression we have written expression we want to write the output on this so but because this is a decimal number and this is also a decimal number when we assign it to an integer which is supposed to be a whole number see the decimal values are gone why should that happen it should be 22.4 right so the point where's the point 4 the point 4 is gone because it says Hey listen I understand you're using double are using your decimal values but this is a integer type it's a whole number this cannot store this container cannot contain these fraction values so that's why these data types are very important so every time you're going to use these fractions values or decimal values we need to change the data type from integer to double and at the same time if you're using characters a b c d capital or small or full stop comma any special need character basically at that time we say hey because you're using a character now you're going to use something called character this is not integer this is not double this is a character so CH represents a character type but if you're using as a whole string multiple characters then we say hang on hang on hang on because you're using not a single character multiple characters now you're supposed to use something called a string follow me so moving forward now let's talk more about string so string as we said is basically a string of characters so character is a single character whenever we know need to use multiple characters we use something called string as a data type then we have something called Boolean Boolean basically stores either true or false it only stores one value true or false okay so whenever we using uh data basically we need to understand what type of data we are using if it's just whole numbers we use integer if we are using decimal numbers we use double if we are using single characters it's supposed to be character we using multiple characters then it's supposed to be string and then if it's either only true or false we use bull as a Boolean data type now Boolean has a huge use within programming I want to talk more about this later on so don't worry about that we'll do some more examples with C++ booleans okay so now uh we have already talked about this declaration so we Define the type of data the variable name the container and the value or the expression that we want to save it in so for example if I want to have 15 and I want to save this value I say hey 15 is a number save this number inside this container called a variable and then make sure it's a for type integer okay meaning that it's a 15 number type similarly we can use 15 as a different in a different form as well so we can declare a variable first okay so this is called variable declaration means we declare a variable integer my name and then semicolon so we don't give it a value you can do that then we say hey this my number container may contain a value called 15 or any other expressions for example 15 + 10 whatever the answer is assign it to this number we can use this in different different way as well so I can say integer my number is equals to 15 I initialize a variable and give it a value called 15 then I change it value to a 10 so we can use that as well okay and then we print that value here so you can use multiple variables how we declare multiple variables so you can declare for example we can say integer x equal to 5 comma Y is equal to 6 comma Z is equal to 50 now what this basically mean is called a multiple declaration so we are declaring one container called X another container called Y and another container called Zed each separated with a comma and then the type of data is called integer so the data type is integer and these are basically variables that have been declared so this is what variable declaration is and then we say C out uh again angle brackets x + y + z so we wrote an expression here this expression gets evaluated first and then whatever is the outcome is printed here we can say hey let's just declare integer XYZ so we declare the variables first and then we initialize all these variables with the value 50 now what this expression here means is that we say hey there's an X which is equals to Y which is equals to Z which is equals to 50 so meaning that X is equals to Y and whatever is the value of y will be assigned to or is equal to X when and the value of y is actually dependent on Zed so whatever is the value of Zed it becomes the value of y and becomes the value of x so the value of Zed is then assigned with 50 so first 50 gets assigned to The Zed and then that 50 is assigned to the Y 50 and then that y value is assigned to the x 50 so all of these three variables now will have value called 50 50 50 and then we add them together we should see 150 as an output okay identifiers so let's talk more about C++ identifiers now now C+ plus identifiers must be identified with a unique name what exactly we mean by identifiers identifiers are basically the variable names here okay the name of the containers so this is what identifiers refers to so it says that whenever you're using variables or in other words we use identify because these same rules apply with the function names as well we're going to talk about functions as well as we discussed with the main function so it says that hey make sure that these variable names must be unique so if I come here you say that this in minus minutes per hour this is a variable so always it's a good variable name or a good practice as a programmer is that you must name your variables by the meaning of it whatever is the purpose of this you should name it there now the rules are very simple all variables or identify names must begin with N uh with a character you should not begin it with a number so if I use three now it becomes an invalided variable name if I use it it's not allowed should gives us an error that hey What's happen there's an invalid error so now see we get an error so the compiler when it compiles the code when you execute or compile the code the compiler kicks in it reads your variable name and it says Hey three why why you used a number first a number cannot be the name of the variable that's a standard good practice so it say not allowed boss you cannot do that so it gives us and throws us our error so we cannot use this that's the first rule second the variable names cannot contain spaces so if you use spaces minutes space per hour again compiler error because it now considers these as two different things so space Also matters at this point so if you use space again compiler complaints I said hey hang on why why is this a space I don't understand I understand per per hour but then there's minutes is a separate word par hour is separate if you are going to do that use a comma so this will now mean that this is a variable called minutes and then a variable called par so these are two different variables but if you're going to use them make sure you just use them as a sing single word if you want to use them you can use underscores as well underscores are allowed but hash I believe are not allowed so if you use hash or any other symbols they will start to complain so these are standard rule of thumbs that we follow whenever we are using these variable names so a good practice is always use a meaningful name uh you can use M but it's not so easy to understand you don't understand what exactly m is doing right but here minutes per hour makes more sense so that's a good rule of practice so do make sure that your names contains letters digits and underscores numbers can be the second word so if I can use for example uh minutes to num per two per hour two so now I have used multiple numbers here this is completely allowed but the first letter cannot be a number that's the rule of thumb okay so these are certain basic rules that you need to understand so whenever we using variable names make sure there are no spaces it doesn't start with a number you can use underscore don't use spaces and then let's just talk more about constants now with constant is basically an additional keyword that we specify now do make sure this word called keyword I'm using this word keyword and it's use Conant regularly in your programming keyword means basically these are reserved words by the programming language themselves so for example if I come back here I say integer minute no problem I can say integer my no problem but when I use for example certain words as integer integer now there's a problem here because this word this variable name integer is already reserved by the programming language so the compiler will interpret this as two data types integer is already reserved so this reserved word in programming we refer to as keywords okay so this means that hey I already have an integer why you wrote integer again I don't understand this then for example C out this is already an object's name it's already reserved it's I've already return it you don't need to use C out or you cannot use return here says Hey return is supposed to return a reply to the function name it's a reserve word you cannot use this word for your own variables or your own function names okay so that's another key rule that you need to follow so variable names cannot be the names that are already reserved or our keywords Kish hopefully you get that then let's talk about constants constant is something um depending on how you use it I actually don't use it that often but sometimes they are used anyway they are basically uh sometimes we declare a integer my name number 50 but that means you can easily change this value of number again and again and again but at certain times you don't want to change it you want to be make sure it's fixed and nobody can change it in your coding so you set it to a constant a constant is basically a variable a container whose values cannot be changed it's what we call unchangeable and read only okay so that basically means that whenever you prefix your variable with constant the values now are fixed you cannot change this variable containers value this cannot be changed anymore that's what basically a constant does so whenever we declaring variables we use constant and it's fixed colas let's move on to the inputs okay so just like C out we have discussed C out is used to generate the output on the console so this output on the console is always generated using this ke word called C out double angle brackets what if we want to take the input from the user that's where C in comes into play C N is a predefined variable again it's a predefined that reads the data from the keyboard and extraction operator forward back slash forward angle brackets okay so C out is basically there to print that output on the console but to read the input from the user we use something called CN and note this time the angle brackets Direction change so these are less than angle brackets and these are greater than angle brackets so now we use C in greater than angle brackets x what this basically means now we expecting an input from the user we are expecting a data from the user because we are expecting a data from the user means that user is going to pass some data what is going to be that data where I'm going to store this data so for that I need to have a variable container so I said hey I have a declared a variable called integer X read the data from the user and save it in some variable called X so the same variable Valu is stored here so when I come here execute it says type a number so this is coming from C out type a number so because we've written C out first give me an output a number so I say 23 I press enter your number is 23 now see out again prints hey your number is again double bangle Brack slash and then X so this basically means that now we are saying that your number again another uh identifier and then we use x so print the value of x with this C out I can print this as a separate line as well okay so now C in is basically reading the data but when it reads the data it needs to store this data in some form of container so that it can be referred in our coding okay so that's why we have used X here and X is again a variable but what kind of data it needs to hold it needs to know the type so we have specified integer here so this means hey integer is there it's going to have a variable called X I'm going to ask the user for the input and then whatever user enters save this in this x variable which is type of integer okay and when I save it then I can go here and print that variable value or do whatever I want with that variable value here okay so a good to know is that c out is pronounced as C out and C in is basically C in simple as that okay so now let's just create a simple calculator wonderful let's just come here and start working with code so now when we do this the first line of code is Hash include I stream as I said mandatory for every code using names space STD telling it that I'm going to use the standard Library these names then I'm declaring two variables integer X and integer y so this is called variable declaration usually we call it variable declaration meaning that hey let me just write a comment here means that I have declared a variable I've not yet given it a value So currently they don't hold any value at all okay so they are just like an empty variables so I say integer sum again another variable declaration so I said I see out Type A number and then we give it a number so this variable is basically assigning or the value is being assigned here okay then we say C out another time and we say type another number and then again that number is being read once that number is read then we're going to perform the arithmetic operation this is quite simple to understand sum is equal to x + y means take the value of x which we have entered take the value of y which we have entered here add them together and assign it to the sum okay and then whatever is the output we go C out sum is and then we print the value of sum so if you execute this code we come back here we say uh for example 21 21 and then our answer is 42 so both these values we enter and then answer is printed on output so this is how a typical program works so this is what a C++ program looks like we declare a variable we give some instruction on the console for one person to understand what they supposed to do we read their input and then we process that input and generate an output based on their input values okay so this is a very simple additional program that it works so we declare variables we print the output on the console give as an instruction we ask them to enter a value we again ask them to enter another value we save them in the side particular variables we perform an arithmetic operation and we generate the output on the screen okay so this is how basically it works so let's just move more forward into data types now C++ data types again we have already talked about this in variables uh are basically of type uh integer float character Boolean and string so we have integer as a number form float or a double basically are decimal values they differ in terms of memory size so float and double basically depends on how much memory is occupied for each variable so do remember when we declare a variable of type integer it occupies a memory inside of our computer okay so whenever a variable is declared it occupies a certain memory float occupies a memory double occupies a little bit more memory character again occupies a memory meaning that because this is a data it's being stored in a container so where is that container is going to go it's going to go inside the computer's memory okay so because it's going to go inside the computer's memory it will occupy a certain amount of space inside that memory so how much space is allocated is depending on these integer double character Boolean variables okay so this basic Boolean data type occupies just one bite of memory in your system because it only stores true and false so it just needs one byte okay if you use character again character occupies one byte stores a single character letter number or an asking integer occupies two or four bytes stores the whole numbers without decimals so it occupies two or four bytes excuse me depending on how much memory or how much value or bigger value you are basically using float occupies four bytes in memory so every time you declare a variable of float it will occupy four bytes so if I've declared four variables of float in my code it basically means that my code now occupies 16 bytes of memory just from the variabl so that's how our software spaces is calculated so whenever you download the application you see it occupies the memory because internally the code every variable occupies certain amount of space double8 so what this memory means that every time we occupy the memory they identifies it how much or how big or small value can be assigned based on that memory okay so this is basically what a simple data types looks like so let's move on to operators now what do we mean by C++ operators so operators are used to perform operations on variables and values so for example we've already seen plus and we know this from mathematics right everybody's aware of plus does 2 plus two or 100 plus plus so this is an operator in programming we call this an operator it basically adds these two numbers together and we can use this operator in various different ways so in this case 100 + 50 basically means that add these two values together assign it to the sum so answer is like 150 in this case we say hey take the value of sum so whatever is the value of this sum that is we assigned here take that value added with 250 so answer becomes 400 then we say hey whatever is the value of some one and sorry in this case uh value of sum two add it with sum two so we are taking the value of this sum reusing those values and printing the output on the console so this is basically a very simple plus operators there are various different operators that we can use like plus minus multiply divide self-explanatory I don't think so I have to give you a math class they are just simple operators so X Plus y xus y x multip y we can do all these mathematic operators such and then modulus as well which Returns the division or remainder so I hope you already know this in uh programming we use uh modulus to identify this uh division operator plus plus and minus minus now these are two one of the most coolest operators that we use in programming uh mathematics I don't believe it's directly there Plus+ basically means increase the value of the variable by one and minus minus means decrease the value of the operator by one okay let's just try this one out and I will explain what exactly means so now for example if you look into this code again every C++ code starts with hash include iio stream using name space integer main block bracket start bracket close block start block close and then we start to write integer x equals to 5 so for now we say hey there's a variable called X it has a value of five because this is a number I assigned it a data type called five now what I'm supposed to do is I'm going to use Plus+ x what this Plus+ X means that take the value of x and increase it by one and now see out X so irrelevantly this expression would be evaluated as this x is equal to x + 1 okay so this is how it's evaluated so this basically means now is x++ one is that take the current value of x add one to it and then assign it back to X so now the value of x changes to 6 so now if I print it the value is printed as six because XS is like a Shand operator for adding one just one in your system so whenever you want to add just one into your system basically we say x + 1 is equals to X so this is a longer form of expression the short end is just plus plus X that's how it works and similarly minus minus okay so these are what we call arithmetic operators in our Expressions so in C++ we use them for multiplication minus divide division modulus increment one or decrement one value then we have something called assignment operators these assignment operators are quite fun though there are again easiest one is equals to sign we have used this previously as well meaning that assign the value of 10 to this container or this variable called X so assignment operator will simply assign the value of 10 to X okay or assign this value of x + equals to 5 now what this basically means is it's what we call additional assignment operator so this means that take the value of x add it to five and then and the save the answer back inside five so if I execute this code the answer is 15 because we took the integer X is equals to 10 we said hey X initial value is 10 do X+ equal to which is again additional assignment operator and five what this expression actually is evaluated as that we have X is equal to x + 5 so we say hey take the current value of x which is 10 add it to five okay and whatever is the answer of this expression assign it back to the x value so we are assigning the same answer back to the X so that's how the value of x now gets updated to 15 and when we print the value of x it prints 15 so this is again another shorthand operator that allows us to quickly solve an expression similarly there are many other operators as well so we say equal to plus equal to just as I said x + 3 which basically means that assign the current value of uh X add it with three and then whatever the answer back to X then minus equals to multiply equal to divide equal to all basically reciprocating the same thing okay they are what we call the shorthand operators similarly do the modulus and it will do the modular then we have and operator or operator nor operator double shift backs and shift uh left okay so we're going to talk more about this in compression logical operators later on so this is basically what um simply assignment operators are these are various different forms that we can use then we go inside the comparison operators what do we mean by the comparison operators comparison operators are technically used for comparison purpose purpose now this is where the real programming starts to work with so these are operators just giving you the basics and then we start to use them more Within These loops and if else conditions okay so the comparision operator basically Works in a way that it says hey hang on I need to compare two values so I use this comparison operator so for example in this case integer X is equal to 5 integer Y is equal to 3 so we have declared two variables X contains five y contains three okay so okay and we doing a comparison here so we write a brackets again brackets are not relevant at the moment I'll talk more about this later on uh but it basically means that this is a piece of code here first execute this and then whatever is the answer print that answer on the output because this is an expression usually we tend to write expression within the brackets here okay so we say hey X greater than y it means that are we are evaluating an expression is the value of x greater than the value of y so the reply here would be true okay yes the value of x is greater than y so it returns true or in other words one okay so if you try this code out yourself you would see the answer is one now hey hang on it says hang on hang on we have been talking about this Boolean as a true or false why do we get one because Boolean is a data type that only reads either true or false false and in computer there's no true and false as a whole word what they assume is Zer or one so in this case one means true and 0o means false so for example if I make this as 31 and then I run this code again I will get zero which means false why is this a zero here because zero represents false because 31 is bigger than five so the condition here we set that is the value of x greater than the value of y and the answer is no X is smaller than y so this becomes false because this is a false C++ prints false here in terms of zero so if it is true it will print one which means it's true if it prints zero it basically means hey it's a false value okay I said okay so similarly there are various different comparison operators that we use and we will be using them extensively in our conditional operators switch while for Loop statements okay I I'll try to do a few more programs on so that you can understand clearly the basically is we use something called equal to equal to means we compare the value of two different variables together okay is the value of x equal to Y are the same exactly similar right if they are not equal to so it's like reverse conversion hey is this a value not equal to this thing yes true and false greater than less than greater than equal to and less than equal to okay so what this basically means that if I use for example greater than again in the same example this is greater than and then if I use hey less than it basically means if I use the value less than so we say x is less than y so is the when condition of X less than y it returns zero so now hang on hang on this is not equal to why this is less than so condition becomes false now here's the trick what if I use the value five and five what should the answer be now if I run this code again okay so now because both values are five technically they are equal to each other but the condition we are asking is that is the value of x less than y so it returns as zero says no the X is not less than y what happens if I change the condition to greater than so that means that x value is greater than y so should this be true so if I execute this code in this case again we get zero so the both is returning to us sayy when the values are same they both are returning the same thing so for example if you can if you want let's just write this again so I can say hey see out print me the value of brackets again brackets indicate that we want this expression to be solved first okay and then we can say x greater than y we asking it again spaces in this between does not really matter you can write it without the spaces as well space majorly matters between the variable names and the function names will that matter so again now we get see out as an uh this error so what this error indicates is that hey there's an error in the line number eight the co n count was not declared or is not in the scope so it means that hey I think you're trying to use a function or object but I have no clue what this is it's not declared okay so that's why we used variable declaration word previously as well so means that this variable has not being declared so because I misspelled it it is not count it is c o u t out so if I correct the spelling again run this code again so now that's the job of the compiler it evaluates the code and gives us out so now we see it generates zero and zero in the both cases even though the values are 5 five so the less than false greater than false what should we do now this is where the greater than symbol comes into play so this symbol here greater than equal to and less than equal to okay so this means that if the value is greater than or equal to so now if I use this and run this code now I will get what we call true because see one is there and then for the next Condition it's zero now this is true because we have used less than and equal to so we have used a double condition here so now we are asking hey I want to check whether whether the value is less or equal to Y because it's not less but it is equal to Y so this equal to comparison Works in this case and similarly we can use equal to in the greater than as well so when we use this now means that we are checking that if the value is five or greater than that give me the answer so we now get true and true for both these cases so this is what basically greater than equal to represents okay so if we go back into now logical operators within operators chapter we have something called logical operators now typically there are three main logical operators we have and or and not okay what these two means they are basically again uh if if I go back into comparisons for a moment do remember every time you do a comparison operator the answer will always be in form of true and false one and zero whenever we use assignment or arithmetic operators their answer is in form of arithmetic operations okay but comparision operators always always always return return either true or false one or zero okay similarly if you go inside the logical operators they also represent one or zero however logical operators works on two or more comparison operators what if you need to check two different conditions okay what should we do then so we use these logical operators to check two different conditions is the value of x for example in this case X is equal to 5 Y is equal to 3 so we decare two variables here again inside the integer main block start block close and we say hey we have these two variables okay what should be the output of it so we say C out print the output in case if is X greater than three and X is less than 10 so if the value of x is greater than three and the value of x is less than 10 only then you should use give me an output so if I execute it it gives me one it says yes the value of x is greater than three and less than five so what if I use less than 10 so if I use it 15 sorry so now if I set it 15 what should be the answer be true or false it says is the value of x greater than three yeah than three it's 15 should work fine right h no problem however because there's an and operator here it says and the value of x also needs to be less than 10 so in this case when I run this code the output is what we call false why is false because in end condition both the condition needs to be true end is like an logical operator that evaluates two half of an expression so this is expression a this is expression B if both these expressions are true only then it will say the condition is true otherwise it will give us a false answer so and is very strict it says I need to be very sure these both conditions are needs to be true if I use or operator here which is this pipe symbol here okay so this or logical or is a pipe symbol if you use this here now if I run this code the condition becomes true because it's or so the the word and means it's a strict thing I need h x must be greater than three and it must be less than 10 however or is a more relaxed thing said ah okay is it greater than three said yeah it's greater than three perfect okay let's make it true it doesn't worry about this condition at all it executes it though be mindful of that but says because X is greater than three I don't really mind because this a side this first half of the expression is true for me it's true no problem okay as long as the one of these is true so for example if I say uh X is greater than for example y I can use this expression here as well and then y can be for example uh y can be five and then this can be for example five okay so now if I run this code the answer is true even though it's a greater than symbol so technically X is greater than y a n they're both equal the condition should be false or X is less than 10 because the second expression says or operator means it can be less than 10 so the condition becomes true follow me so it these logical operators basically check the two halves of Expressions so they always work on two expressions okay they always work on two expressions and to ensure a very strict rule of these conditional statements we'll try to explore them more with the conditional um inside the conditions chapter to make more sense of exactly what we mean with few practical examples okay guys so now let's talk more about C++ strings now strings are basically used to store text and characters okay so whenever we want to store a text in form of multiple characters we basically use string in order to use string in C++ we use the data type called string with small s Define the variable name is equals to and we write any string within the inverted quotation marks anything you write within the inverted notation marks automatically becomes a string and it's stored in a string data type okay um we technically use something called hash include string header file now we have been talking about IO stream in pre previous sessions now we're going to talk more about this thing now when we use hash include string this basically means we are importing a string Library so when you check out the code you use IO stream as a default because it has to be there every time as we need to use see out for that then we use another header file called hash include string this means that now in this code the string library is incorporated due to which we are able to use this string data type okay so this will allow us to use the string data type and then when we use the string within the inverted quotation marks and it can be anything we print this variable the string is printed on the screen so this is simply a string data type now a string has several different methods and backrounds but again this is for a more detailed video on C++ strings so for now in this basic course we just going to move on to math class after string we use something called C++ math now math is again a library that allows us to use mathematical functions such as Max okay so let me just explain so what we do is we use iostream names space STD main integer main again as we said these are standard program lines that we write in every C++ code then we use see out Max 5 + 10 now what exactly is Max let me just explain this Max is a built-in function that exists in C++ Library okay so inside the default C++ Library math functions are there there are several I'll just go through them in a moment this is basically a function just like the main we talked about earlier that main is a function bracket start bracket close indicates this is a function name it has a block of code and that code performs certain tasks certain instructions similar to this a custom built-in function has been created called Max bracket start bracket close okay and what it takes is two arguments now these are known as arguments okay it's just like passing a value so you pass like $10 to somebody hey here's a $10 go get me that thing so that when you pass that money to somebody that here's a $10 that's what we call in programming an argument means passing the value so here we are passing two values to this guy Max the value one being five separated by comma comma is quite important space is not so don't worry about the space it's just for understanding sake but the comma is is absolutely imperative this indicates this value one comma value two what this function does though is that it finds out the maximum value in these two arguments provided so in this case it says there's one value called five there's one value called 10 among these two 10 is the largest value this is what Max function does then similar to that we have minimum function minimum what it do as name suggest it does the same thing finds out the minimum value among the two values that has been provided similarly we have something called cmath cmath is basically another Library file that is used for more advanced form ofun functions such as finding out the square root rounding of certain values and finding the log of a particular number so these are more complex and more advanced level of mathematical equations again everybody knows about square root or rounding off and log but to use them we use a library called cmath okay so again just like string just like iost stream we say hash include cmat because this is a library file this Library file contains all the definitions of sqart how square root is calculated you don't have to do that manually it's already there it's already been built this function is there again this is known as a function having an argument only one in this case 64 and we want to find out square root of this so if you execute the code this is what we supposed to get so square root of 64 is 8 because we use a header file called hash include again standard using Nam space integer main every code begins with the same lines of codes we say see out square root of 64 is sqrd 64 so sqrd is a function because we know this from these brackets here and then 64 is the value the argument that we passed to this particular function so when we pass this argument to this function this function has a set of code that automatically calculates and returns a number of a square root in terms of an answer okay so this function definition the code how to square root is calculated actually exists in this cmath Library file so this is why Library files are used and they are so important similarly we move forward and there is a round function so it rounds off the value to three for example 2.6 is rounded off to three value and then the logarithm is again calculated for two values so these are various different mathematical functions that you can use and there's a whole complete reference of different mathematical functions in C++ that you can use on this link here so do check it out moving forward now we have something called booleans in C++ what are booleans booleans are basically uh in programming are what we call the data types okay we have talked about integer we have talked about float and we talked about string Boolean is another type of data type it usually represents what we call true or false value which in C++ is represented in form of one and zero okay so I gave one example in earlier classes as well so we say hey this is C++ and when we use these logical Expressions so we use the operators here arithmatic uh comparison and logical operators these operators always process the answer in form of what we call Boolean values they return the answer in Boolean values as well so greater than sign less than sign they always work on a Boolean and return true or false so for example bu is a data type is coding fun we assign it a value true so when we assign it a value true technically we are giving it value one and when we say hey false it basically means zero so we can write true we can write false internally C++ compiler handles true as one and false as zero so when we say C out is coding the output actually is one not true which basically means again true simple as that and then when we say hey is the fish tasty the answer is false so in our understanding we say hey false but the output in terms of C++ compiler generates zero which indicates it's false so this is what basically a Boolean values work with so if you talk more about Boolean Expressions as we discussed in the uh previous operators when I say x is greater than y this basically means we are using a expression a conditional expression that evaluates is X greater than y and the answer always comes in form of true or false okay so always the answer returns either true or false which is actually a Boolean value so whenever we write an expression we always get get the answer in form of true or in form of false so that's that's the key thing that you remember okay so the Boolean expression basically means when we have a value in true and for false values and we use these comparison operators to evaluate a condition and answer always comes in form of true and false so all those comparision operators that we discussed less than equal to not equal to greater than equal to not equal to all of them actually return a Boolean type of reply okay so that's why it's quite important to understand whenever we use these operators the answer always comes in form of true and false okay and that is basically because it's returning an answer the internally system needs to know what type of data that is and that data is actually a Boolean thing okay so when we use this this becomes a Boolean expression or conditional statement so we refer to this in two different ways we say hey this is a conditional statement because it's evaluating a particular condition or we say hey this is a Boolean expression because the answer is always going to be in true and false form so that's why they also known as Boolean Expressions so you would be hearing these terms a lot when we start working with programming and actually this is across the board so even if you're doing C language or Java language or Python language these concepts are fundamentally same across most most of the programming languages so that's why we always work with C++ as a start because it develops that understanding and then the same understanding is actually crossed and used across the board okay so if you understand Boolean Expressions now here the fun part becomes conditional statements this is where we actually use these Boolean expressions or conditional Expressions most commonly we use them with something called if and else statement okay so now here the true logic starts to play come into play for C++ so in C++ we already have discussed these uh conditional statements such as a is less than b a is less than equal to B A is greater than b greater than equal to equal to and not equal to these all are what we call conditional expressions or conditional statements but more prominently we use these statements with something called if else El if and switch statement okay so let's explore this very uh in a simplest and easy way first the if statement the if a statement is basically a conditional statement that allows us to evaluate a condition and based on the condition perform a certain task previously we just wanted to find out hey is this value equal or not so it's true and false but if it is true what should happen if it's false then what should happen I just don't want the answer in form of true and false but then based on this I want to perform certain calculations certain operations certain more instructions so to do that we use a statement called if if is the synx goes is that you use this if keyword again this is a keyword a reserve word then we use block start block close and then we specify a condition now this can be considered as a type of function because it evaluates a condition if condition is true this function will execute if condition is false this function will not execute okay so how this works is that the compiler when we write the if statement it evaluates a Boolean expression if Boolean expression returns one meaning true the block of code inside this if will get executed if this is false this will not get executed it says hey if this is false I don't want to execute this line of code this is where the conditional statements come into play the if statements come into play so if you execute the code the 20 is greater than 18 this statement is executed because 20 is greater than this but if I change the condition and run this code again now what happens is 20 less than 18 okay obviously this is false because the condition is false there is no output printed here this line will not be executed that's the main purpose of if that based on a condition if the condition is true execute whatever we have written inside this if block if the condition is false just ignore this completely so this line does not get executed at all if the condition is false and hence there's no output if the condition is true only then this block of code will execute and perform its task so sometimes we don't need the output and in true in form we just need the condition to tell us hey if it's true then we put it inside the if statement that's where the if statement comes into play so if this condition is true execute this block of code this is what basically it means so if this comparision returns true execute this block block of code this in a simple English language this is how we basically use the if statement okay oops then if you go further we have something called else what does else means else means that if this condition becomes false what should I do then in this example that we did previously if this condition is false nothing is printed right so nothing was printed so if I change this value for example less than 18 and I run the code nothing gets printed here because the condition is false because the condition is false there is no output but sometimes that's not always we want we want to evaluate a specific condition and we want to see if this condition is true execute the block of code however if this returns false then I want something else to be done and something else to be printed as an output in that case we write another keyword called else and then else does not have any expression here it does not need any expression because it's tied with if it's automatically internally connected with if if the condition is true execute this code automatically if the condition is false the control will move to this else and whatever we have written inside else block that code will execute if the condition is true this block gets executed and else is completely ignored else does not get executed so do keep this thing in mind the ex ution of else statement is actually dependent on this condition if the condition is true the if the code inside the if block will exe be executed and the control will go outside if is completely ignored by the one Linker and it doesn't get executed at all however if the condition is false this code is ignored and the control goes to the else and else statement gets execute so this is where the if else condition statements come into play so for example we have a simple code here if you evaluate by go inside this code it says again has include I stream we using namespace STD inte main standard code we write every single time we say integer time is equals to 20 so we declared a variable called integer time then we wrote the if condition if time is less than 18 print good day if else if this condition is false print good evening so now you see it's good evening because the time is 20 and we have say hey if time is less than 18 only then 18 I believe is be like 6 p.m. right so if it's less than 6 p.m. say hey good evening otherwise just for example if I increase this condition okay and I run the code now what should happen good day okay because time is 20 it's greater than 18 the value of time is 20 it says Hey the value of time is 20 is 20 greater than 18 yes the condition becomes true because this condition is true the C out gets printed else is is completely ignored because I don't need that because my first if came true hence I don't need to use the else condition gone okay however if the condition is false now because the condition becomes false I changed it to less than so we say if the condition is less than 18 the condition return or this expression will return false because this will return false if we'll say hm because this is false I don't need to execute this block of code so it will automatically go from this condition and move to our else and the code within the else gets executed follow me so this is how basically it works so then we have something called nested else if conditions as well what this basically means that sometimes we want hey if I want a condition here in else a nested Els if means that if the first condition is true executed else check another condition if this is true execute it else execute this thing now this is an example of nested FS so if you execute this code here it says good evening how does this work let me explain we say integer time is equals to 22 so if time is less than 10 say good morning if the because this is not less than 22 this condition becomes false so the control goes to else but it says hey hang on I've already written another if inside this else statement so else if becomes a part of another substatement and then we write if time is less than 20 say good day else print good evening this basically means that first check is it less than 10 H it's not less than 10 say okay if it's not less than 10 don't worry about it go and check if it's less than 20 if it's less than 20 print good day and just go out but even if all these two expressions are false then finally this else will execute and it will say good evening to us so for example the time is two okay so I set the time to two technically this basically now means that it will go and check time less than 10 the condition becomes true because the first condition became true it should print good morning and then just come out all of these statements are completely ignored because the first condition becomes true these two lines are ignored or not executed at all because the first condition became true so for example if I set it to 12 now so when I run this code it will say hey this value is 12 is time less than 10 J time is 12 so this condition becomes false and this line is ignored now the control goes to this else from this else it says if time is less than 20 so ah yeah this is true so it's going to print good date to us understand let's do one more example of it so for example if I have this code and uh let me for example delete everything in the between so let's just start a fresh and I'm going to write for example marks marksheet oops grade so the idea here is that basically if I get from 0 to 40 uh 39 right 39 I should be for example failed if I get grades anywhere from 40 to for example uh for 49 I believe usually depends on what system you're following but let's go for 49 and I can say you get the grade okay so your marks anywhere between 40 to 49 you get you get a DG grade then for example if your marks are 50 to 59 uh you get for example what we call a c grade okay and then if your marks are anywhere oops anywhere between 60 to 75 we say you get uh B grade Okay then if your marks are anywhere between 76 to uh 8 85 we say hang on you get a grade and then if you get anything for between 86 to 100 you get for example what we call uh A+ grade okay so for example we have this conditions now where we need to get the marks of a student so for example I will say integer integer marks is equals to for example 23 come back here and we say uh C okay let's just use C out oh small C out and then we can say print your grade is and then semicolon okay so now we write if a statement we say if for example your marks are less than 39 block start block close so every time I because in see um in if you need you need to use block start block close every time you need to use a block make sure or is just the practice IIT we start and close at the same time and then add the space this way we have more control over it let me zoom into this again one more time so we can read this code more appropriately blah blah blah okay so once you are here we say hey if marks are less than 39 you're supposed to print C out oh not out C out uh your grade is for example F fail semicolon so let's just execute this code now to see how the output follows so if you do this this basically means if my grade is 23 or anything less than 39 I get failed what if I enter exactly 39 and if I run this code you do not get any output why is that because we have used less than condition it says if your grade is less than 39 means 38 would work fine but if it is exactly same now there's no output because this if becomes false because this is false this does not get executed so the better practice would be less than equal to so if it is 39 and less than 39 then you are fail okay now after this we write something called else and then we write another if statement and we say hey if your marks are greater than equal to 40 okay and this is where and operator comes into play so we say and not a full stop we say and your marks are less than equal to 49 okay as as per hour this practice now see what we have done we have said hey if your marks are greater than 40 greater than equal to 40 so if you get 40 or above and and means it will make sure that both conditions are true so if it says and marks are less than equal to 49 then what I need to do again block start block close make sure you always do that then what you need to do is again Enter space I say hey see out and I will say for example your grade is DG grade you get a DG grade and then make sure you give a semic colar okay so now I'm going to say hey if your marks are below 39 you fail but if your marks are anywhere between these two numbers you're supposed to do that so if the marks for example in this case are 49 okay now if I run this code what this will mean it will come here marks less than equal to 39 the condition becomes false said hey what you have done this is false okay so this statement does not get executed the control goes to the else it says because this is false now I need to execute else previously else was not written so it did not execute anything so if you write it the C++ compiler will automatically connect this if with this else so within else after giving a space we have written another if statement so this actually becomes a part of this else now we say hey if your marks are greater than 40 and less than 49 so now we have written two conditions greater than 40 and less than 49 your grade is degrade it gives me an error because again I don't know why I'm just spelling it as count every single time if I run this code your grade is degrade now again the key thing here to remember is how we write the expression okay this Boolean expression if I just write equal to sign this becomes a false condition because the grade is exactly the same so we need to use equal to here similarly greater than equal to so if I get 40 here and if I don't write equal to here this condition becomes false as well because I've written greater than 40 so if you run it you still should not get any output because my marks are exactly 40 marks it says your marks are greater than 40 not equal to greater than so this becomes false because this is false the whole expression will be considered as false due to this end guy that's why make sure whenever we using a logic these smaller mistakes in logical operators can render your result catastrophically different fine so once we have this now as you would have understand now we write another else and this time this actually is part of this if Okay so this if is here this else actually is part of this if and uh and then we say else we write another if statement block start block close double enter to add a space now inside this marks I will write marks are greater than equal to 50 and marks are less than equal to what was our code 50 and 60 59 so we say 59 here okay if that is the case let me just do copy paste too lazy to retype and then I'm going to say C out now you get what we call C grade so now follow the hierarchy if this is true this gets executed everything below it will be ignored if this is false then it goes inside this first else inside the else we have written a nested if which will evaluate if your marks are between 40 and 49 if this gets true you will print this thing and everything below it is completely ignored but even if these conditions become false so for example if my grid are not uh this if I say 56 so now this condition becomes false both of them so the control from this if it will come down to this else so this else is actually connected to this F so this else will then again say heyy hang on hang on I have another if statement so now this if statement condition is evaluated okay so when you run this code now it will say hey my are is your grade equal greater than 50 yes it's greater than 50 this becomes true and marks must be less than 59 so this is less than 59 as well so this time we get a c gr similarly now we say because we have this if we write another else statement and inside this else we write another if statement block start block close enter double enter to add that space and we're going to say h How about if your marks are greater than equal to 60 and less than equal to and marks are less than equal to for example 7 35 in that case what should I do I go inside this else and I print C out this time you get what we call a b grade okay this is what the rules we defined previously now if this else is false for example if I set the result to um 65 now so this becomes false because the marks are higher again this becomes false because marks does not follow between this range this becomes false because again marks also don't fall in this range then this say hey are your marks greater than 60 yep greater than 60 and they are less than 75 so we have provided a range here using the end operator and two expressions and so yeah it's less than that so now b grd gets executed similarly if even if that's not the case for example if my marks are for example 85 now this also becomes false in both scenarios so we say hey if that is the case again we go here we write another else oops it do you do we say else oh what happening I don't want capital letters else if again another block statement and inside this if we're going to say hey finally if the marks are greater than equal to 76 and the marks must be what they were 85 marks must be less than equal to 85 then brother you need to print that hey you got finally an a grade see so now you see the hierarchy of the code how it is following so all these basically become become a child of it and it's a good practice to always use indentation to clearly identify your code if you write it just in a single line sometimes it's very difficult to understand what's happening so this indentation actually does play a key role that's why I have done the indentation it's just for understanding sake it has no impact on the output these indentation basically allow us to understand the code in a better way okay s okay so then finally if I said even if the results are not there what if I get 95 marks in my exam what should I do now is so because my if I get a 95 five marks I have greater than 76 and less than 85 so if I come back here I will write another else I say hey else block start block close semicolon bracket start bracket close and then I say if oops where did my if go I'm supposed to write if here if and I'm going to say now the marks needs to be greater than equal to 86 okay see I've not given any space this should not be a problem and then I say and marks space less than equal to space and 100 okay so now this would indicate that my marks are supposed to be less than that if that is the case you come here and you control V print it and then you can say hey you got A+ grades if I run the code again this time I should be getting a plus gr why is that because my marks are 95 so it will evaluate the first condition 39 is it less than 39 sorry it's fail this will return false if this is false the control from this if goes to this else inside this else we have another if statement so now it say hey if marks are greater than 40 and less than 49 you print this statement because again this condition both this condition becomes false the controls from this if now goes to this else this else again has another if if the marks are greater than 50 less than 59 execute this if none of this condition is true from this if the control goes to this else from this else again another inner if then this if is connected with this else this else will again have another in if which basically we'll finally evaluate if this again is false from this again so this is a complete example of if else if else if else for even this such kind of a simple scenarios so now you can see you can build up a more complex logic of your code for example if you're building a Tic Tac to or a chess game so there lots of conditional statements that go if this is true do that thing else do that thing but if in within that else if this is this if that is that so when you have multiple conditions we Nest them out what happens again now if I write the condition for example just uh 05 okay so if I run the code what will be the output okay exactly because it comes here it says hey if marks are less than 39 you fail so because I wrote five only this condition becomes true it prints C out fail and then all of this code at the bottom is completely ignored nothing gets executed why because the first if became true the code executed block end and then capish the program just ends these lines are no more relevant only else will execute depending on which condition whatever marks are so if I give 95 false false false it will execute line by line everything and see a condition false ah condition false ah condition false and finally say thank God this condition is true and then it will execute okay and then finally sometimes we do is we write a simple else this time there's no if and I can say Bren uh if such is the case we say uh invalid marks T please enter value between one and 100 okay so now we have given an instructions this basically means what if I give value 155 user I ask them enter your marks they enter 100 115 so what should I do now okay so in this case we have written an last else without any if because after 100 we don't want to evaluate anything so we just now say hey this if has else but there's no if so if everything is false if the number does not match or satisfy any of these conditions this becomes our last executable statement telling our user that there's an error there's an issue your value is not correct okay so your grade is invalid marks please enter value between blah blah blah things okay so we wrote this statement to let the users know clearly that hey you have enter the values but they are invalid marks and you need to enter something there so this is a typically if else structure and that's how they follow okay so this is what this all are these what things are talking about FS are absolutely important within our programming to understand how logic building is being done then we have something called a switch statement so now since we have talked about the conditional statements let's talk more about the switch statements switch statement is basically a type of conditional statements just like ifls but they work little bit differently the synx of switch statement is that you write a switch statement you write an expression and then you use something called case so that's why commonly they are also known as switch and case statements every switch statement has an expression okay and I talk I will talk about expressions in a moment then the block start block close again the round brackets are there so do note that so inside these round brackets we write an expression we start the block we end the block unlike if else statements where we can write any statement we want in this switch statement there's a rule is more that you need to write some something called a case and then provide a value against which this is being compared to and then you write your block of code now you can write everything here but then at the end the last statement of this case has to be a break okay so another keyword nothing else no value no passing just write break and semicolon this basically means that U it's it's a single statement that performs a specific task I will explain then we have case Y which does this certain code and then break and then we write something called a default value okay what this default value means that uh if none of these case gets executed everything is false the default will get executed if any one of this is ex correct executes it ends now let me go into a little bit more detail with it so for example when we write switch statement we say an expression but the expression technically is just a single value this usually is a single value the way the switch works that it always does an equal to comparison in conditional F Els we can do less than greater than oops sorry we can do in the standard conditional statements we can do less than greater than equal to not equal to all those comparisions however switch statement always works with the oneon-one equal to comparison so usually even though we say expression here but this is actually a value so we write a value here and then the case that we use is again it behaves like an equal to operator and it compares the value that we provide in the case with this value that is provided in the switch statement if the value of day and the value of case match exactly same only then the statement under the case will get executed otherwise next case is checked then it says hey if the value is two does this value also contains two it doesn't exactly match and then the statement gets executed if does not match it goes to the next case similarly Case by case every case value is compared equal to to with this switch single statement so this value is automatically compared with all of these cases whichever gets true gets executed whichever gets false uh basically the next case is executed now why the break statement the break is just a single single word statement what it does is it stops the execution flow so for example if you execute this code and understand what's Happening Here currently we get an output called Thursday because the integer four is uh day is basically a four value what happens if I give it a value one or let's just put it four okay leave it to that point but I remove the break statement okay so let me just comment this out what happened sorry uh so let's just comment this break statement out okay and then command this five breakout as well now if I run this code see the as soon as the output comes see we get Friday but Thursday but Friday and Saturday also are printed if you come back to the code we say hey the day value is four the case is also four so this case becomes false so the case value one one is not equal to four false then it goes to two two is not equal to four false then it goes to three three is also not equal to four false four case this four value is exactly same as four value hence this case gets executed the moment the case gets executed or gets true automatically it will ignore all other cases is simply that so the this case line is executed however the way they work is it does not ignore the statement below it it ignores the case but because there's no block here it's ended with a double column there's no block of code because there's no block of code meaning having a what's happening okay so because there's no black of code here we basically use something called uh this block is not there we use something called semicolon so if one case gets true what the compiler will do it will ignore all these case statements but it will not get EX ignore these statements some books say that if one case is true all cases below it becomes true which technically in my opinion is not true these are not considered true they are just completely ignored but the statements below it are not ignored because there's no block of code this is just the condition and the statement below it because there's no break here all the statements below this are executed up till this point Saturday and Sunday is not executed see Thursday Friday Saturday because after Saturday there's a break as soon as it finds a break the execution just breaks here break is used to stop the execution flow it breaks the code and takes the code out and ends it here out of the switch statement so it's just like a stop sign that hey if this gets true okay so if I I remove it now if I execute it now only Thursday will be printed why is that that because we have break so once this case becomes true execute the statement below it and then break it break means uh just stop the execution flow and come out of this switch block so this switch block will be broken and code will stop its execution because of this break statement if you don't use the break statement next cases are ignored after the case is true but the see out statement is not ignored so this gets printed this gets printed but it ends here in the break time so that's why the break is there so case and switch statement they are all used to define the same thing so now what happens if I if you come back to this code here remember this program code uh marksheet code I can write exactly the same thing using switch case statements so let's just try this one out so if I have this statement and I can say instead of day or let's let's just write this whole from the scratch so we say hey we have this now let's just write integer MK is equals to for example 34 semicolon then we write s SW C switch switch and we give it the parameter called marks and then we say block start block close BL capish okay now here's a small error because we when we remove the code we forgot to remove one last block so this block is there so if you compile it now it will give say hey I have a block here but I don't know which starting block it belongs to and this is an extra block so it just doesn't make sense it will give an error so make sure you just follow the same principle block start block close and no other blocks here now we write case statement here so we say hello case is equals to for example uh one Mark colum and then we say see out print for example uh fail and then we give semicolon here and then we write break here now see the problem when we wrote this statement we gave it a range of values that's where the end operator comes into play if I write Marx less than 39 this is a range automatically from anything below 39 is considered here from 1 to 39 so a range is specified using the if statements but if you try to do the same with switch statements it only Compares One value with the marks so if Mark is one you fail what happens Mark is two what happens if the marks are three if marks are four if marks are five got it so that means that if I'm going to do the same program I would have to write every Mark here individ separately and that's a nightmare so that's why you have to know where you have to use the switch statements or where you have to use the if else or nested if else structure based on the condition you are trying to solve okay so not in every cases switch statement works that creates the problem for us so this is what we refer to as a switch statement and the break does the same thing so follow this along and you will understand finally if no value is true true the default is executed okay so the default statement is like if none of the case is true so for example here we have written D is equals to 4 case six false case 7 false and nothing else is there so automatically default will get executed either that or either case depends on that so do always remember that switch always does equal to comparison oneon-one and it follows with that good shot now finally let's just talk more about loops what exactly are loops and how they work we have something called while loop we have something called for Loop and do while loop as well so if I go inside while loop we have a while and do while and then we have a for Loop here as well these are three looping statements in numerous situations you would come across where you need to repeat a certain set of code so instead of writing every line of code individually we use something called loops loops are basically a block of code that are executed repeatedly until a certain condition is reached the way it works is for example we write something called while again another keyword round bracket start round bracket close and a condition is a specify now this can be any condition similar to if else okay so it can have a range very easily so until that condition is true this code get executed and it will just keep on repeating itself keep on repeating itself keep on repeating itself until this condition becomes false so for example we have this thing let's try this code out yep so now we say hey has include I stream using name space STD main integer I is equals to zero so we write an expression if I is less than five okay so if I is less than five go in print the C value uh print C out print this value of I and then we use something called back sln for a new line so up until now we have not discussed this this is called escape sequence back sln will indicate that we want a new line here so we say C out print the value of I again insertion operator and then back slash n back slash is basically Escape character it means that we want a new line here so this is a code for entering a new line and it's written inside inverted quotation marks as a see out so wherever in your output you need a new line basically we use back slash n to generate the new line here now we did this increment here now remember we talked about increment operators previously what this basically means take the value of I compare it with five if the condition is true print this value then increase the value of I okay so this value will increase by one so if the value is zero now it becomes one now you say Hey Now does do the comparison so this 0 1 2 3 4 is automatically generated so because the first first time when the loop executes the value becomes uh zero okay so let me just put it in this way uh first time okay I is equals to0 this is what this is what happening so we say I is equals to Z this is the first time okay then it says if this is the case if this becomes true uh execute Loop okay so if this condition is true I value is zero so we say condition is I less than 5 if this becomes true if it is equals to tr R true execute the loop so this becomes the first step we have assign the value I to Zer check it if this I value is less than five execute the loop so this Loop gets executed when the loop get executed it prints this statement but within the loop now we have done this increment we have changed the value of I Plus + 1 this basically means that now this will print uh add one to I okay which basically means as we have done or understood previously as well I is equal to I + 1 H where is I why I'm missing words here I is equals to I + 1 so this means take the value of I add a one value to it and assign it back to I okay so this is a short and there so now we have changed the value of I here so oops now when I write WR it I is becomes what one because we have changed the value of I here okay so now second again it will Loop okay and now repeat step first to make sense that's it that's the basic logic in the first step take the value of I compare it with the value of five if they it gets true execute the loop so when Loop gets executed it will print this value and it will add one to the value of I because of this increment so I becomes one now from 0 to one because it becomes one and then it will repeat itself so again it goes back to the first step now the I value becomes for example one it will say hey I is 1 now uh is I less than five if this true executed so this is how basically the loop works okay and this is a while loop the syntax of a while loop let me give you one more example with that so for example we can also say uh here uh let's just take um integer t a table is equals to four so for example if I want to generate the table of four how should I do that so I said hey I want a table of four so we write while loop okay block start block close integer uh integer X is equals to one okay so we say hey uh I want the the table of four but if x is less than equal to 10 execute up to this point because again tables are supposed to be generated from 1 to 10 okay so we have want a table of four and then we set a value increment X is equal to 1 and then if x is less than equal to 10 so what you're supposed to do now is you use C out block block and then we're going to say hang on uh take the value of this table multiply it with what we said say x and then generate the answer so here's what again we can do for example bracket start we can say table and then we can go add another column and then we can add inverted quotation marks we can use this symbol within inverted quotation marks blah blah things and then we can say hey print another output multiply by X okay and then we can say again another value and and then we add inverted quotation marks is equals to and then double value and then we print this inside okay okay so now what we are doing we formatting the table so we say print the table number whatever number we have given here so four multip by value of x is equals to the value of this expression table means 4 multip by the value of x once you do that semicolon come here and do x++ increment the value of x if we run this code and if there's no error we get this table generated but because this is completely on a single line does not really make sense so that's why what we do is after the answer is given write another quotation or just simply you can do this thing see out blah blah blah inverted quotations semicolon and inside in quotations we write new line so print the one row of table and then add a new line and then add plus one and run the code so if you execute it now we should get a nice looking table and back slash and oh sorry it's forward slash it's supposed to be back slash so if you use backlash should be fine so now we should get a nice table okay so this is what looping statement does it Loops automatically the code works is that it automatically will repeat itself until this condition becomes false so we say start x with 1 is X less than equal to 10 the condition is true if this is true print this line of code then print this line of code then add one to the value of x so now X becomes two okay so this is two here so once X is two because we've done plus so is two less than 10 condition again becomes true execute this line execute this line and now add one more to the current value of x now X becomes three because it's three looping statement the control will again go back here three less than 10 Yes again execute this execute this add one to X now four if it is four go back up is this condition true yes and then continue continue up till the value of 10 when it reaches 10 it say hey X less than equal to 10 condition true it prints it next time again it goes adds one more value now it becomes 11 when it becomes 11 condition becomes false the looping statement executes uh exits its operation and come here so now we have generated a simple table the way we have done it we have said c print the value of table so table is four so we get four 4 4 4 4 4 4 four here then again uh insertion operat inverted quotation multiply sign multiply sign is here so this now behaves like a string then again add the value of x so whatever is the value of x gets printed here then again print print insertion operator in quotation marks equal to and the answer is calculated using here take the value in table multiply it with the value of x so when the loop executes for the first time the value of table is four the value of x is equal to 1 so 4 * 1 becomes 4 next time x becomes Plus+ X becomes 2 2 is less than 10 so now two is printed here and table will say 4 * 2 becomes 8 so you can now very easily generate any table if I say table of six it will generate table of six for me so for example if I say hey let me generate table of 61 so if I execute the code generates table of 61 I said I don't need table till 10 I want table till 20 for six okay so now you just change this ending parameter here x is less than equal to 20 so now as you understand the looping statement will automatically execute up till 20 times so now you know that this line has executed or this is 20 different lines but I just wrote these four lines that's the major advantage or one more advantage of looping statement that your you write a less amount of code and generate a longer output so you don't have to to generate the table entirely manually you just write a simple piece of code and generate the entire table this is what we call looping statements are so in this case while it requires an expression it requires an increment so basically there are three steps to this looping statement okay so in this case if I write again first is uh initialize uh variable okay the second step is uh check condition okay the the third step is uh if condition true then what you do is execute the block inside the loop okay so if the condition is true execute the block that's inside here execute the code that's inside here then we say step number four do the increment okay so incre I mean increment to variable okay so this is what we do so execute the code and make sure you do the increment so this increment is quite important if you don't do it for example if I comment this line of code out blah blah things I run the code now can you tell me what should be the output of this thing technically it will be an infinite Loop okay 6666666 value is 111111 answer is 666 and actually is an infinite Loop this is what we have to be very careful about Loop because Loop means repeative statements okay it will mean that it will continue to execute until this expression is false if the value of x is not changing means Lu of X remains same this condition will always render true hence this is an infinite Loop technically is just keep on going going going going going going going forever and ever and ever okay so that's why this increment is quite important to ensure that at a certain point this Loop while breaks down this condition becomes false and the body can exit otherwise we will have an infinite statement so this increment is quite important finally when you do the increment the fifth step is what we call step five and r e p repeat uh step two so now four five major points initialize the variable every Loop needs to have that so we have initialized the variable second says check the condition so we check the condition if condition is true execute the block so if condition is true execute the block once the code is done make sure at certain point of code you write x++ which basically means do the increment of the variable this is quite important a variable which is connected with this condition so the condition at certain point becomes false and loop can exit once this increment is done repeat step number two so that means go back here to this point so check the condition if condition is true blah blah blah things if condition become false it automatically exits so this are the steps of every single Loop that we use same thing goes with the dowi loop now in a dowi loop the only difference is that you write do block of code first then while condition the syntax differs this basically means that even if your condition is false the loop will uh the body or the statements inside the loop will execute at least once okay so whatever you do there will be uh one time a statement will execute the syntax is exactly or the logic is exactly same we initial the variable we check or we print the statements we do the increment but the condition is now checked at the last so in this case when we wrote the Doh this check condition step becomes the four fifth statement okay so this is the change here that's the only change in do while so no matter what you do so if you write integer one you print it uh at least one time it will execute so for example if I say five this basically means that is the value of I greater than five I starts with zero this is greater than five condition becomes false because this condition becomes false technically the loop should not execute if I run the code the code will at least print one value why because the statements are actually written before we evaluate a condition at certain point of time some logic requires us that at least one time a statement is executed before the condition is evaluated that's why we use a do while Lo so in this case the condition gets executed first then increment and then the condition is evaluated the expression is executed and increment is done and the steps are changing but again the logic is same it will keep on repeating its same statements okay now moving on to for statement the F statement is similar to again do and while but the synex differs the logic is exactly same and this is one of the best Loops in most commonly used Loop all around for again is a looping statement everything you write inside the for will execute but the way we write it is just different the way we write it just different the logic is almost same as this thing okay so let me ex explain this so what happens now is that inside the for loop block start round brackets end we write three statements all three steps that we mentioned here initialize a variable check a condition do the increment the these 1 2 and four these steps are actually written on a single line in a for statement separated by a semicolon inside these round brackets the statement one executes only one time so this first statement is initialization and technically initialization should only happen before the loop or for the one time so this statement only will be executed once then we say condition statement so this will execute every single time then increment operator usually this is where we write this increment operator and the block of code this is how we basically specify we write for integer I equals to Z initialization in the while loop we did this before the while loop in for loop it's done actually inside the loop semicolon then the conditional statement I is equal to I is less than five or and or any other conditional statement you can use as we used in uh previously then semicolon i++ so you can see these three statements are actually written inside the for block all ad once block start block close and the C statement is executed okay now the way it works is here's the logic of it okay if I execute this code again 012 3 here's the logic of for Loop okay first step do the increment oh sorry do the I and I initialize variable okay so let's just move this word out initialize the variable which is integer I is equals to Z this part gets executed first foremost then next step is check condition okay so it checks the condition here in the second step if the condition is true what it will do uh three if true x e ex execute block of code okay no problem then go back and do the increment and then again fifth step is r e p repeat step two okay so this is the logic behind it what this basically now means is initialize the variable so this variable gets initialized check the condition condition gets checked but this line is ignored for the first time this does not get executed for the first time after the condition is evaluated if to execute the block of code so this block of code gets executed okay so one two three these three things are done once the block of code is executed now the control goes back to the increment corner now it does the increment to the current value so I becomes one here after it is after you do the increment repeat the step two so the step two is again now check the condition execute the block if it is true go and then go and do the increment once increment is done check condition execute the code do the increment check the condition execute the code so this is how the for Loop basically works now we can do the same table operation in this thing as well so I can say hey I like you so let me use four bracket start bracket close and block start block close usually I just do this initially so I say hey integer X is equals to 1 start from one semicolon separated then X less than for example equal to 10 so I wanted to generate the table from 1 to 10 semicolon and then x++ do the increment here now you need to write C out okay not that c out go back here and I say hey print the value of table again I don't have a variable table here so let me just declare integer table is equals to for example six semicolon so we declare the table and we say hey see out print the value of table again insertion operation in a string multiply it or or print the multiplication sign again we go back to the insertion and print the value of x and then again insertion this time uh inverted quotation marks print the equal sign again insertion and then again in Brackets are right because it's an expression we want to ensure that it prints does the calculation first and then it performs the print operation simple so same thing that we did previously we did here and then we know that we I have to write something called C out blah oops see how block star block insertion operator and then we use something called for back slash oops back slash and semicolon so now if I execute the table is printed the code with while loop this one is again same so but in while we did initialize ation before the while loop check the condition inside the while loop and do the increment inside the block of code in do statements again the same thing do the initialization but before the do execute the statement do the increment and now check the condition so this is just a little the order of code is different similarly if you come back in the for Loop the same syntax has been written do the initialization check the condition execute the statement then come back at this point do the increment check the condition execute the statement once the condition becomes false block come out of the code so this is what basically for Loop does okay and you can go and give it a good read and then for just like nested F Els we have something nested Loops as well meaning that you can have a loop inside a loop so if you see this what we have now is we have a for Loop okay and block start block close inside the for Loop it prints certain stat M but then it has an another loop inside main Loop so now what happens we see outer loop one time inner loop one time inner loop one time inner loop one time then outer loop again 1 two three so we get a different output this time how this is happening we say for integer initialize the variable less than condition but this less than two is there that's why we only get outer two i++ so we say C out Outer value I back sln so when you use an inner loop what happens that the when the loop executes for the first time this Loop executes one first time it come inside and said hey I have another loop here so now this Loop comes and gets executed so integer J is equal to 1 J Less Than 3 j++ C out in J but because this Loop is inside the outer loop this Loop will complete its operations before the control is given back to the parent Loop so this Loop executes for the first time outer loop one then comes to the inner loop J is equal to 1 J Less Than 3 so this gets executed J is Valu is 1 increment now J becomes two prints it increment J becomes three checks the condition prints it when the condition becomes False only then the control of this Loop breaks and the control goes back to the main Loop because this Loop has just executed one time so it does the increment checks the condition if the condition is true again it prints outer loop too because because this statement is there now inner loop again gets executed so every one time you execute an outer loop the inner loop executes its complete Cycles so if this is for example three it executes three times if I change it to five it will execute for the five times this means this ex Loop outer loop only execute two times but the inner loop will repeat itself for every single outer every single time the outer loop get executed okay so outer loop executes one time the inner loop gets executed five times the outer loop executes second time again the inner loop executes from the first to the one time if I change this to for example four now you can imagine that outer loop will execute four times in total but inner loop will execute its complete cycle for every time the outer loop gets executed so once first time outer loop executes the inner loop gets executed five times condition breaks control goes back to the outer loop it executes a second time now it body again needs to execute so inside the body because there's another loop the loop will again start from fresh because there's an initialization here so Loop will again start from one executes completes his cycle control back goes back to the outer loop then again inner loop is executed five times when the condition become false control goes back to the outer Cube uh Outer Loop and it gets executed so this is what a nested Loop looks like and you can use nested Loops we use conditions inside the loops nest Ed conditions and whatever you want the key concept to understand here is that looping statements are statements that get repeat itself now you see how many lines we have generated and the the code that we've written for it very simple code and very small code okay so outer for Loop is a repe uh loop you can use nested Loops means you can use for Loop inside for loop I can use a while loop here as well I can use Loops inside Loops I can use a for Loop inside a while Loops if I come back into my while or do while I can use a for Loop inside here I can use for do while here I can use while here depends on that okay so you can use nested Loops inside each other doesn't really matter we use if else conditions and so on so forth now depends on exactly what you want to try to do that okay so these are basically of basic looping statements okay so now this wraps up this uh short tutorial that explains the basic of C++ okay um if you've understood up till this point excellent uh go through the remaining topics I will try to create a whole detail video in which uh more of these topics are covered but if you understand these fundamentals now going through this will make things more easy that's why I'm using W3 schools it has a good and basic reference points and clears the concept immensely but remember a good programmer can only be an excellent programmer once you do practice so knowing about for Loop is one thing but understanding how to use it in different situations is completely different so for that purpose you need to do practice the more practice you do the more strong programmer you become by practice means you doing practice different tasks so for that I recommend one more website called W3 resources if anybody has used it or not uh but it's also very simple but yet very beautiful website in this website if you come inside here and you will find backend exercises so go into C++ and here there are tons of different top exercise questions based on that so if I click on basic you can see there are various different programs that you need to write so for example uh take any program write a C++ program that checks whether a per number is primitive or not and it you solve this problem value of this again the values are given based on these values you solve that problem then you take another problem then you take another problem the more problems you solve uh the more better and proficient you become I am creating a manual for that for more containing more problems so if you want to access that uh leave a comment below so I can share my uh practice task lab manual as I call it practice task manual for C++ and it contains around 100 problems that you can solve on various different topics that we have covered so all those 100 tasks are simple programs with their explanation and how they can be solved or you can use this website as well it has also plenty of wonderful website web programs use these programs see how to solve them the example code is also there you can access and understand the sample code as well so once you understand the basic logic everything becomes easy the more you solve simpol problems don't try to create you know the whole inventory new wheel or try to create your own operting system at this moment for example try to solve small problems and then that's how you start to learn the logic develop the logic the more coding and solve problem solving coding you do the more logic is built the more logic is built the better programmer you become understand so thank you very much for watching if you have watched up to this point again leave your comments down below let me know how you found this lecture and I will be seeing you around with for more lectures later on thank you bye-bye see you"
}