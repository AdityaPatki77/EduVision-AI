{"transcript": "watch this video If you quickly want to learn modern JavaScript Im Wesley and Ive been a full stack developer for years myself so about JavaScript we can use it to build websites and web apps mobile apps desktop apps and server apps and even games and Ai and virtual reality apps JavaScript is different from java they were created around the same time but theyre completely different and the technical standard is actually called ecmascript or ES for short and it has new versions every year so Im gonna use Chrome if you look at the statistics most people in the world use Chrome we need a program to write the code in now the most popular one is Visual Studio code right so you can just Google that to install Visual Studio card just click on the button here and it should pop up in a moment and you can just go through the steps alright I have opened up my code editor which is Visual Studio code also step one of any new project is to open a folder second step is to start creating files for your project it all starts with HTML actually so when I go to a website like airbnb.com and if I will press enter here the first file that we actually get back is in it is an HTML file and now I can write HTML pick the second option and it will give me an hnl belly plate its important that we know a little bit about HTML and CSS as well now I want to open this up in the browser so I can click and drag this onto the top part of my browser alright now lets say I want to style this the HTML is for the raw information you could say and then usually we want to style it to make it look better adult and then the class name dot text right so if I refresh here it doesnt work yet because we are not linking to our style sheets here so very important you can see the HTML file as sort of the entry point so youre going to give the HTML file to the browser and browser is going to go line by line but nowhere here right now doesnt see anything with CSS so I can write link its in the same folder so we can just write standard CSS if I now refresh its red you can also have a fav icon a font or a script file right so lets lets start talking about JavaScript so lets say we have a script file here as well and now of course we need to link to the script file as well now script files is a little bit strange we dont write link we actually write script and the problem with this is that it will block parsing the rest of the page in the past people solve this by putting it at the end of the body not very fast so these days in modern JavaScript what we can do is we can keep it in the head and we can add deferred attributes and if you write it like this you can also just write it in short like this there are about nine essential Concepts in JavaScript that you really need to understand if you understand these I consider you to be a JavaScript developer lets say I have some kind of number 5000 maybe theres a price of something I cannot just write random numbers in here like this usually you want to store them somewhere we use variables to store something so we can say far price is 5000 and then a semicolon so this is a number type were assigning that to a new variable called price this entire thing is a statement so we use a semicolon at the end to indicate the end of the statement the downside of far is that I can I could accidentally overwrite this somewhere else so these days instead of far people tend to use const this is a constant so I cannot do this if I do this the program will give me an error however sometimes we do need to change the variable we dont want to use the far keyword because far has other downsides we want to use the modern lat keywords and so a lot of developers have adopted the the system of always using const unless you actually need to reassign a new value to the variable in that case you select but I will still call Price a variable even though Im creating it with the const keyword because it still belongs to the category variables now lets talk a little bit more about the data types and structures in JavaScript so we can have a description of something thats a string you use these quotation marks and this could be just some text right new apartment you can use single quotation marks or you can use double ones its usually a bit easier to write single ones so I just write single ones but they work the same way we also have numbers like we just saw okay we can also have booleans do we want a new floor imagine that can be true or it can be false then we have arrays an array is a list of something I have options for the floor we have an array here with square brackets can be hardwood right so its a list of elements and here were using three strings but we could also add numbers here right or booleans or even another array by the way if youre very name has these two words new floor in other programming languages people use Kebab case thats what a hyphen or snake case underscore in JavaScript we have so-called camel case especially during development you want to work with the so-called console so we can right click inspect and it will actually give you any element step it will give you the HTML of this page and then below here it will give you the CSS theres also the console tab I can write JavaScript here right so I could say something like as5 and youre going to get this weird undefined thats not important for now thats simply because this statements here doesnt really return anything I can also do this now for tutorials people dock this usually on the on the bottom and then here I can output something to console right so here in my script file if I just write hello this variable does not exist if we get an error however if we write console and Save in refresh we do not get an error because the browser actually gives us something called console so we get console tool to to interact with this console here in the browser I can lock options I have to get the whole array it gives you the length as well and it gives youre going to see this real prototype thing you can ignore it for now you dont really use it sometimes you want to log the length if I refresh we get three so there are three elements in the array if you want to know the first element you could use square bracket it starts with index 0. so if I save here and refresh we get hardwood but not hardwood and if I want to see the second element I actually have to use the number one its zero index base so zero one two so objects are used to represent something right so I can have an apartment and then we have curly braces and here we have properties so the apartment could have a price lets say 300 000 square meters 500 or something right maybe four is it furnished the answer is true yes right so here all of these statements theyre just some loose statements they dont theyre not connected in any way sometimes we want to connect certain information we want to associate them together so were using object for that another common object is for example an error object these three properties now are associated together to represent something bigger than them the advantage of these objects is that it becomes easier to reason a battle Club because we have these entities to hold in our heads now if you want to access any of these properties you can just write dot notation so to dot price and you get the value for that property or square meters you can access it like that lets continue with functions so these are also statements statement one were assigning a string to a variable called description and only when that is finished do we continue with the next statement so these statements run as soon as this script gets executed but sometimes we want to group statements together and maybe run them at a later point in time we use functions for that so its a function keyword and then we can give it a name we can say calculate price parentheses and curly braces theres no semicolon here and in here we can put the statement is 5000 bedrooms is three and then maybe we have something like price is whatever the square meter says times the number of bedrooms and so now I have a refresh nothing happens here and even if we try to lock the price if I refresh here we dont see anything yet and let me comment this out right so we can write comments in JavaScript like this two forward slashes you can also select all of this and then for me its Ctrl forward slash and this is just a comment its not really code that will be run its just for the developer here the browser will eventually go to these lines it will see the function but it will not run the statements in here it will just create the function into memory if we want to run the statements in there we have to actually execute the function like this we have to call the function or execute the function now if I save here and refresh we do actually see something log right so we see five thousand three five thousand times three is actually from 15 000. we can also do plus we can do minus now we also have to understand about functions is they can also have inputs so instead of hard coding 5003 here for square meters maybe were gonna pass that as inputs to this function so these are calls also called parameters and so now when we call this function we have to give the we have to give the actual arguments right so the actual values are called arguments and this specification here these are called parameters so now if I refresh here we get the same result because when we call this the browser will assign the number 5000 to two square meters and the number three two bedrooms and then we can just still multiply them right so here we have two parameters you can also have one parameter right and then maybe hard code this it still works lets go continue with two parameters here we can call this whatever we want we can call this blah blah but then you do have to use the blah blah word here instead of square meters so whatever you put here is going to assign this value to whatever you put here all right now what if we dont log this if I just save this and refresh now what happens nothing actually we just make this calculation we just send it to price and then what while the function just ends and we dont do anything so typically you also want to return something from from a function so we can return the price as this is a statement its the return keyword but what happens when you do return is this one actually sort of be replaced with whatever you return it would get 15 000 here right so we want to assign that lets say we want to assign assign it to a variable cop result and then we can log result right so if we do this and refresh you can see we still get 15 000 right so here we return this will be 15 000 essentially assigned to result and thats what were logging here right thats what happens when you return something you can also just do this in one line right so you dont have to create a whole new variable and then return that variable you can also just do this in one line and you get this all right right this is called a function declaration another syntax an old-school syntax traditional syntax is the following so you would create a variable called calculate price and then you would have an anonymous function so this is actually a statement because were creating a new variable and assigning something to that so here we do have the semicolon and then we can have the same statements in there in this case we just have one statement so here we have the same essentially so this is a function it doesnt have a name right so we dont have a name now but still does the exact same as before and were assigning this function to a variable called calculate price so we can still use calculate price to call or execute the function so if I refresh you still get the same result this is called a function expression its also a bit traditional now we have some Innovation here so these days we also have Arrow functions so we would say const calculate price now we dont have the function keyword we have a fat Arrow here right and a semicolon at the end and then the statements stay the same the parameters here we would specify here square meters bedrooms we can still use the same word when I calculate price to run the function and we still get the same result the arrow function is a bit shorter as you can see because we dont have the function keyword instead we have this fat Arrow right so this is the arrow function it doesnt have a name and were assigning that to calculate price so it can still sort of derive the name from that you can put all of this on one line I can get rid of the semicolon I call it brings like that and then we can even remove the return keyword because if you put it on one line like this its an implicit return so it knows that you intend to return this the result of this you dont have to write the return keyword so now this is the the arrow function in its most compact form this is a function and it does the same as this one right and this one but its much shorter syntax as you can see it doesnt have a name but were assigning this function to calculate price so we can still use calculate browser to call it right and just to prove this to you if I refresh here we still get the same result if I change these inputs to 1000 and maybe two bedrooms save and refresh we still get a result here right if you only have one parameter here by the way right if you have something like this you have one parameter in Arrow function you can even leave off the parentheses this is the most compact form of a function in JavaScript right so this is the evolution of functions in JavaScript you will see Arrow functions a lot used these days as so-called callback functions so when you need to supply a function as an input often this is used but you will also still often see this function declaration so this traditional syntax as well the function expression I have to say you dont see that often anymore so its mostly the function declaration and the error function all right lets continue with scoping and hoisting if I have some function calculate price lets say and the only thing it does is log the number 5000 then I can call the function here right if I refresh we actually see 5000 but what happens if I do this can I call the function before we have created this if I do this yes we actually can because the traditional function here function declaration gets hoisted so practically you can imagine it sort of gets hoisted to the top of the file and so you can still call it if this was an error function so if I convert this to an arrow function if we try this and save and refresh we actually get an error so you cannot do this with an error function like that right so here you have you have to create a before you call it this is actually a variable right so this is the function and were assigning that here to this variable all right lets say I have a function here Im going to create a variable here right so I create a variable in the function can I log the price here and I access the variable price outside of this function block so lets see now we cannot right also if this is let if I try to try to access this now right so lets encounter variables are scoped to the nearest block meaning whenever you see these curly braces the const and let variables can only be accessed in there not outside of there thats coping lets talk about string concatenation versus template laterals this also has received some Innovation your total cost is colon and then Im going to use whatever the price variable is can I just write price like that lets see what we get now if I save here and refresh we will get your total cost is literally price the word price thats not what we want I want to get whatever the value is of price so you can do string concatenation you can use plus and then you can use variable price if these are two numbers plus just use mathematical Edition but here its a string so it will it will see this as adding this whatever this is to the string if a save here and refresh we actually do c5000 we also have template literals these days well lets say I have description and now I use back text and then I set my color in here so these are back tags your total cost is colon and now to use price we can write it like this right so here in template results we stay within the back deck and we can use dollar sign curly braces with Price save refresh we still get the same result this is very helpful if you have for example multiple lines of code right so if you want to insert HTML for example often you work with very large strings or templates and you have a lot of lines these spectix template literals are very helpful all right lets continue to control flow as it calls so if we can have a price of 5000 and in here you can say if some condition is true so if price is more than two thousand lets say we want to run some statements here well just have one statement here otherwise else we will log files right so if we save here and refresh we see true because what were saying here is essentially 5000 is greater than 2000 this is a true statement and so we we go in this block if this was false we would go into this block right not in here these statements would not be run price is greater than 10 000 this is false thats another refresh we dont run this statement now we go into this block where we run control log files you dont have to use else sometimes we only want to use if now we have some Innovation here with a ternary operator so we can say is price greater than 10 000 question mark is this if this is true lets say we want to log through else colon log false right this is the same as what we did here just shorter syntax this is nice if you have a simple condition like this if you have a lot of conditions in here or you have a lot of statements its easier to use the if else old cool syntax but now if we do this and refresh we get false right if I make this 2000 or if I make this five lets say refresh we get through and this is ternary operator all right lets talk about some of the operators we have in JavaScript we can we can lock price plus 50 lets see what we got we got 1050 we can do minus basic mathematical operations we can do multiplication as well by the way weve already seen that we should get 50 thousand all right so then we have a lot of comparison operators so we can say if price is greater than 200 also log true else console log false and we can also check if its less than right so we should see false now yeah now what if we do this price is greater than 1000 and so here indeed we get files but what we can also check for if its equal to so now were saying price is greater than or equal to one thousand so now we get true we can also just check is the price 1000 right so to check if its actually equal to something we use double equal signs not one one is assignment right so here were assigning the value 1000 to a new variable and here were going to check is that variable equal to the number one thousand and its true here we also have triple equal signs and if we do this we also get through whats the difference between these two so maybe this 1000 is coming as a string right maybe because we have some kind of string on our application with the number in there so lets say we have the string 1000 and thats false so this is strictly equal so its going to check for the type as well well if you do two equal signs its its a bit looser in terms of comparing it so it will not take the type into consideration so here it will say true typically in practice you want to be strict with yourself it reduces the number of bugs so if you can try using the strict equality sign to be as strict as possible lets say we have some different variable new floor we can also just do this right so new floor is actually the Boolean true so now we will always get through but we also have the not operator so here you can invert it so new floor is the Boolean true but here with the exclamation mark it will become false the entire thing becomes false so now we indeed go in here all right lets continue with this price a little bit more lets say we also have square meters now were going to look at the logical and and logical or operators and we could have something if the price is greater than 200 and square meters is less than a thousand right so with logical and operator both of these sides have to be true so this has this has to be true and this has to be true in order for the entire thing to evaluate thats true so if I do this we get true if one of these is false right so if we make this 5000 now this is false right but this one is still true but because one of them is false the entire thing evaluates to false and now we get false however if you use the or operator only one of them has to be true in order for the entire thing to be true right so here price is greater than 5000 is false but this is still true so the entire thing is still true right so here we get true lets continue through the and falsely values in JavaScript so sometimes people will do this if price and the price is just a number its not a Boolean so whats going on here whats going to happen here lets see what we get so we actually get true here so if we just do prize which is just a number if we just do this for some reason the browser will see this as true however if we do the if we do the number zero we get files but this is the concept of truly and falsive values so here with number number zero its not explicitly false but the if you force the the JavaScript engine in this case its going to be in the browser if you force the browser to classify the number zero as either true or false it will say Okay zero it sounds a bit negative you know its empty its nothing so its more false its false C its not explicitly false but its false C thats kind of false it will classify it as false it will evaluate this as false and so we log false any other number however like 5000 it will say Okay 5000 its more in the direction of true its not explicitly true but its kind of true its true Z so here if we refresh we get through right so any number is true the except zero which is file C also with strings for example if I just have some string this will also evaluate the true except an empty string if its an empty string it will be false but most important to understand is empty string and the number zero are falsy everything else is essentially true there are some exceptions as well okay so almost finished here lets continue with loops very important in JavaScript its also a bit tricky so dont worry if youre not completely comfortable with this thats away from kind of list so if you want to have a list you use an array so maybe we have those options for floor again and stone right so just a list with three elements so its an array with three elements and maybe we want to do something for each element in the array and I already set it for each one and so we actually can do something with the array we can say in the options and then for each right so this is something we can do on arrays and we can run some statements right so you have to remember JavaScript program is just a sequence of statements one after another essentially and we can group those statements in a function right thats all what a general program is essentially just a sequence of statements and lets say we want to run some statements for each element in the array so we use for each and then here we can specify the statements that we want to run for each one now we dont just Loosely write the statements in here right so your group statements together in a function so we have to supply a function here so we can use traditional syntax function we could give it a name but were never going to use it outside of here so we never have to reference it again so typically when you have to supply a function these are called callback functions you dont really use a name its sort of a throwaway function we dont need it here you know only here where we have to supply it to for each we want to run this function for each one so in a function body we have those statements right so we can run some station statements here answer statement I can duplicate this line by holding shift alt down arrow key right statement 2 statement three so now if I do this and refresh whats gonna happen its going to run this function for each element in the array so were going to start with hardwood right so for hardwood its going to run these functions so we see statement one statement two step three and then its finished and then we go to the next one its going to run these statements so we see statement one two three again we go to the last one and its going to run the statements again now the browser also gives us access as we go over each one it gives us access to that element that were currently on and will give us that here as it will assign that here to whatever name we put here so we could say blah blah lets say we just want to run one statement here thats actually just log blah blah and we actually see all of all the elements in here right because this function first is going to be run for this element here its going to assign the actual element value to whatever we put here as the parameter name then we can just use it here it will console log blah blah hardwood then were going to go to the next one its going to assign carpet to blah blah thats what were logging here now typically you do want to have a descriptive name for your variables floor option perhaps would be a little bit more descriptive every element here gets Dash option added to it however we can also use a more general purpose Loop the for Loop this used to be a very popular Loop in JavaScript but these this array method as its called is for each one has mostly replaced it in many cases so here usually you create a variable usually called I and initially its going to be C around then we want to run this loop as long as R is less than two lets say after each round were going to increment this I variable by one we can do that in JavaScript by adding plus plus it will just increment it by one mass of zero will become one then in here we we just have the same statements as before now the browser doesnt just give us floor option right so now we need to access the elements in the array a little bit differently right so here options remember to access elements in the array we can use square brackets right so here we would actually use the I variable right so you can already see it looks very complicated compared to this one lets try doing this lets see what we get so now we only get the first two so how does this work so were going to start with i is equal to zero its going to check is 0 less than two thats true so were going to run the statements here the only statement we have here is Optus were going to log options at I or is 0 initially its going to be hard well its going to concatenate that with option thats thats whats going to be locked thats what we see here thats the end of the first round so then here we specify what to do after each round so here were going to increment by one so now I is one and were going to check is I less than is one less than two thats true so were going to run the statement again but now options I I is one right so this could be carpet carpet plus option you get this thats the end of that round were gonna increment I again and were going to check is 2 less than two thats false the function and the loop stops thats why we only see two options two values here if we make a three we actually see all of the array elements here right so the advantage here is with for each youre going over literally each one imagine if you have a large array with thousands of items it can be bad for performance to literally go over each one with four maybe we only want to go over the first two right so it can have better performance and for each be used with a list with an array right with four its more general purpose so we can use it in other contexts as well however its more complicated to use and most of the time you do actually want to go over each one so most of the time you should actually use for each its Nitro syntax and the performance these days is not a huge issue these JavaScript engines the browsers theyre super quick these days alright so last major concept that you need to know let me save and refresh here is how to interact with the HTML CSS as another word for this is interacting with the Dom or if you if youre changing something dollar manipulation so remember if I just write some name here hello we will get an error right because we havent created anything with hello any variable with hello the browser also doesnt give us anything with hello if I write console here however we dont get an error here so the browser actually does give us something console the browser actually gives us this interact with the console in the browser here but now lets say we want to interact with the HTML so here you could say so the browser gives us something else as well documents if I do this and refresh we also dont get an error and so clearly this document exists and if this is coming from the browser and so the browser gives us this its going to go through through all the HTML and then it gives us this document variable here in JavaScript so that we can do something with it lets say we can do pretty much anything we want but lets say we want to change the text here from hello into something else so first we will have to get a reference to this element and we can actually use CSS selectors right so its just in CSS if you want to if you want to style it you first have to select it same with JavaScript if you want to do something with it you have to get a reference to it first we have to select it in our JavaScript we need to find this element in this document right so you can also see this HTML as a document so its also called document object model this is this is a document object and so in this document we need to find this element so what you can do on a document if you can use Query selector right so were going to use were going to query this document with a selector and these are actually just CSN selectors so we can use the CSS selector here so were going to select by class this will give us a reference to that HTML element and we want to store that somewhere but we use a variable for that I like to append L to the variable name if were storing an HTML element in there or reference to the HTML element so now lets see what we get so if I log text L save here and refresh here we actually get the element if I hover this or click it you can see it actually shows us on the page that we have selected this element all right so now we can manipulate this element so we can say its text content we can set that to something maybe we want to set it to welcome when our refresh you can see it has become welcome another common thing is lets say we want to insert some HTML lets say we want to wrap this in spend tag right lets see well create a span element if we do this lets see if we refresh now it will actually literally write span here so if you actually want the browser to parse that as HTML you want to use inner HTML so so now we dont see span and if you go here to the elements tab into text here you will see it now has the span around it so the browser actually parses this as HTML and will create an HTML element out of that string here right so thats text content versus inner HTML another common way is because now were always replacing this and so here initially its going to be hello and then as soon as the browser execute the script it will become welcome so were replacing it sometimes we dont want to replace it we just want to insert something adjacent to it so on top or after it so we now have a low and lets say instead of replacing it we want to insert this right after it so we can use insert adjacent HTML so it will still be parsed as HTML and now its a function actually so its slightly different so we need to specify two things what we want to insert thats what were doing here but actually before we do that the first argument here should be where so it could be before the end right before the end if you do this and refresh you can see it has now added something it hasnt replaced it right so these are three common ways of inserting some kind of content into the page content in our HTML and insert adjacent HTML lets say we want to run this statement when we actually click on an element not just when the script you know runs so here we work with events we have to start listening we have to hook into it first so on this element we already have a reference we can say dot add event listener and here we can specify which event we are listening for right so here for example I could enter with my mouse thats actually an event Mouse enter its an event I can also leave with my mouse however usually its actually click so when there is a click we want to run some statements now we dont specify the statements Loosely like this right so we group the statements together in a function so we can write function here and doesnt need to have a name because were never gonna reference this name with this function later and then were gonna put the statements in here right so what were saying here when theres a click run this function and that means this statement so now when I save and refresh and now if I click you can see we are adding this welcome text here right so this is a traditional function that we run when this event occurs we could also use an arrow function just replace the function keyword with the fat Arrow I save here and refresh and click it still works in practice people actually usually create a separate function for this so a standalone function typically named after the type of event thats being handled so click Handler or handle click and then the statement would go in here and then here you only have to reference this function by its name right so if we do this save and refresh it still works right so here were saying telling the browser when there is this event run a function with this name could also be the function declaration syntax the actual Syntax for the function doesnt matter we just have to reference set by its name now common mistake here is that people write this so now were saying execute the handle click function thats what this means so as soon as the browser gets to this line and it sees this will run the well run this function but thats not what we want we dont want to run this function at the point of adding the event listener we want to run this function when this event occurs when there is actually a click so we just have to reference this by its name right so thats manipulating the HTML now what about the CSS there are two ways to manipulate the CSS let me reset everything here so the quick and dirty way is to use the elements here and then dot style so here we can say the color should be blue for example right so now the color is blue you can also set the fonts all the CSS properties working and CSS you would you would write font size but the dash in JavaScript you have to use the camo case right font size can be 100 pixels I had this huge so we now see it down here typically this is a bad practice because lets say were also changing the color to Blue for example and lets make this a little bit smaller and now what we get is this but now we start to have all of this CSS scattered and littered in our Javascript file typically you want to have a clean set operation so you do want to confine the actual CSS value into the CSS file right so you would actually create a special class for example text special you have blue and font size 50 pixels and so now were confining the actual Styles in the CSS file and now we can just add this class and so the second way of manipulating the CSS is by using class list because this element has classes it can have multiple classes but now it has only text so it will get these Styles but now were also going to add this class you can add classes remove classes were going to add something here we dont have to use a DOT because it already knows its a class right were using class list and now if I refresh here it still works this is a bit cleaner because now we dont have the CSS liters around our Javascript file its confined into the CSS file here with its class in its rule set well done for making it this far this was a quick overview of modern JavaScript I highly recommend you go through my JavaScript course if you want to become a professional JavaScript developer if you want to work with the front end its also crucial that you know CSS like flexbox CSS grid animations and transitions I also have a course on that definitely checking out in the description by the way if this was held helpful Id really appreciate it if you could like And subscribe also check out my courses on CSS and JavaScript if you want to take those skills to an advanced level because in there we will build some beautiful real world projects from scratch so you can see how everything fits together and really Master CSS or JavaScript and I will also release other courses soon like react and node.js so if you want to be notified then make sure you are subscribed to the email newsletter you can find the link in the description thanks for watching and I hope to see you soon"}