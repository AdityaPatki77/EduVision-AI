{
    "transcript": "Welcome to the React full course. In this course, we'll learn how to build complex websites with React. And by the end of this course, we'll build two projects, a chatbot and an e-commerce project. We'll start from the very basics of React, like how to set up React with JavaScript, and we'll learn each feature in detail step by step. We'll learn the major features of React as well as advanced features like how to use React with a backend, deploy React to the internet with AWS, React with TypeScript, and React with AI. You can find the sections of this course below the video here and here. You can also change the speed of the video here. And you can find subtitles for different languages here. And after each lesson, I'll give you a bunch of exercises that you can do on your own to practice the skills that we learned. In total, this course has over 125 exercises. So, with that being said, let's get started. I'm going to be doing this course on Windows, but the steps are the same if you're using a Mac. Before we begin, we're going to need two pieces of software. Number one is a web browser, and number two is a code editor. The most popular web browser for web development is Google Chrome and the most popular code editor for web development is VS Code. So I recommend using these. If you need to install these, you can search for them on Google. Click the link and follow the instructions to download and install. Now you'll also need to know the basics of JavaScript. React is built on JavaScript and we're going to be writing a lot of JavaScript when using React. Don't worry, you don't need to be an expert in JavaScript. You just need to know some basic features like the ones listed here. And I'll also try to review JavaScript features as we go through this course. If you want to learn JavaScript in more detail, you can check out my JavaScript full course in the video description. Finally, you'll need to know the basics of HTML. When using React, we're going to be writing a lot of HTML. Again, don't worry. You don't need to be an expert in HTML. You just need to know some basic features like the ones listed here. And I'll try my best to review HTML features as we go through this course. If you want to learn HTML in more detail, you can check out my HTML and CSS full course in the video description. If you have any issues in this course, you can check the troubleshooting guide in the description. Now that we have all the requirements that we need, we're ready to learn React. On our computer, we're going to go to our desktop and we're going to create a new folder. So here I'm going to rightclick and create a new folder. And this folder is going to contain all the code that we write in this course. So let's name it react dashcourse and press enter. Next, we're going to open this folder in our code editor VS Code. So, we'll open VS Code and then click File, Open Folder, and select the folder we just created. So, I created my folder on the desktop and it's this folder right here. So, we'll select this folder and then click select folder and we can close this welcome page. So, now let's create a new file to learn React. So up here, we're going to create a new file and we're going to name it react-basics.html and press enter. As a review, a file that ends inh contains HTML code and this creates a website. Next, we're going to create a website and we're going to set up React on this website. Now, to save time, we're actually going to download some starting code. So, we're going to open our web browser, Google Chrome. And at the top, we're going to type super simple.dev/react-basics [Music] and press enter. So, this page has some starting HTML code we can use to learn React. So now let's click on this page and we're going to select all this code by pressing control A on Windows or command A on Mac and we're going to copy paste this code into our file. So we'll right click copy. We can also press control C on Windows or command C on Mac and then open our code editor. And then inside this HTML file, we're going to rightclick and paste. We can also press controlV on Windows or commandV on Mac. And finally, let's save this file by pressing control S on Windows or command S on Mac. Next, we're going to open this file in our web browser to see what the website looks like. To make this easier, we're going to use a VS Code extension called live server. So, the benefit of live server is it will automatically refresh the web page whenever we change some code. So, it's going to make our coding easier. If you don't have live server installed, you can click the extension section and then search for live server at the top and then click install. Once Liveerver is installed, we're going to go back to our code and we're going to open this file in live server by rightclicking in the file and click open with live server. So live server will open the HTML file using our browser and it's going to create a website and we should see the message welcome to super simple dev react course on this website. So this message is displayed by react and this means that we successfully set up react on this website. Now, let's go back to VS Code. And this is the minimum amount of code that we need to set up React. We're going to go through this code step by step to make sure that you understand everything here. First of all, what is React? React is an external library that helps us create websites easier. Now, there are two parts to this statement. Number one, React is an external library. And number two, React helps us create websites easier. Let's go through these one by one. So number one, React is an external library. First, let's review what an external library is. So here we have a bunch of HTML code. An HTML code creates a website. And now how do we load JavaScript onto our website? There are several ways to load JavaScript on a website. One way is to use an HTML element called a script element. For example, under this div element, let's create a script element using less than script greater than and less than/cript greater than. But our code editor might autocomplete this for us. Now, inside this script element, we can write some JavaScript code. For example, console.log the string hello. As a review, this code displays the text hello in the console. So now let's save and we're going to open the console in our browser. So we'll open Google Chrome and Live Server is going to automatically refresh the page and run that JavaScript code. And now we're going to check the console by rightclicking and then click inspect and open the console tab. And you'll see that inside the console we displayed the text hello and that's exactly what this code does. So we successfully loaded this code onto our website. We'll go back to VS Code. So this is one way to run JavaScript code on a website. First, we create a script element and then we put our JavaScript code inside. Another way to run JavaScript is to save our JavaScript code in a file. So on the left, let's create a new file and we'll name it react-basics.js and press enter. So when we end a file with js, this file contains JavaScript code. So now let's move that code into this file. So we'll go to our HTML file. We're going to select this code and then rightclick cut. We can also press controlX on Windows or command X on Mac. And inside our JavaScript file, we're going to rightclick and paste and save this file. Now to run the code inside this file, we're going to go back to our HTML and we're going to add an HTML attribute to this script element. So after this script, we're going to type space and then type src equals double quotes. So the src attribute lets us load a JavaScript from a file. Inside these double quotes, we're going to tell the computer which JavaScript file to load. So we'll type react-basics.js. So this will look for a file called react-basics.js beside the current HTML file. So it's going to find the file here and it's going to run all the code inside this file. So now let's save and open our browser and check the result. Live server will automatically refresh the page and inside the console you can see that we display the message hello. So we're successfully loading code from inside a file. We'll go back to VS Code and this is a second way to load JavaScript. We save our JavaScript in a file and then we load it from the file. Next, the script element can actually load code from anywhere on the internet, not just on our computer. For example, we're going to open Google Chrome and then we're going to create a new tab. And at the top, we're going to type unpkg.com/sups simpledev/external dash library.js and press enter. So on this website we have some JavaScript code. So this is just normal JavaScript code. It displays a message. This is an external library inside the console. So using the script element, we can actually take this code from this website and run it on our own website. To do that, we're going to open VS Code. And inside the src attribute, instead of loading the JavaScript code from a file, we're going to load the JavaScript code from a website. So first, we need the URL of the website. So, we'll go back to Google Chrome and at the top, this is a URL and we're going to copy. And inside VS Code, we're going to remove this file and we're going to paste the URL. And now, let's save. So now let's go back to our website and we're going to go to the tab for our website and we're going to check the console. And inside the console you can see we displayed the message this is an external library. So we successfully loaded JavaScript code from another website. Let's go back to VS Code. So using the script element we can load JavaScript code from anywhere on the internet. So this code is called an external library. An external library is just code that is outside of our computer. It's code that someone else wrote and we can load that code into our website using the script element. Now React is an external library. So React is just a bunch of code that is outside our computer that someone else wrote. and we can load this code on our website and use it. So inside our starting file at the bottom here, these two script elements load the react external library. So loads react.js and react-dom.js. So let's open these URLs in our browser and take a look. So, we're going to select this URL and we're going to copy and inside Google Chrome, we're going to create a new tab. And at the top, we're going to paste the URL and press enter. And on this website, you can see that we have a bunch of JavaScript code. So, this is the code for React. We're just taking all of this code and then loading it onto our website. Let's go back to VS Code and the same thing applies to this second URL. If we select it and then copy and in our browser create a new tab and then at the top paste and press enter. You can see that this website also has a bunch of JavaScript code. And this is also the code for React. So, as you can see, React is an external library. It's just a bunch of code that is outside of our computer that someone else wrote. And we can load this code on our website and use it. Now, before we move on, there's two things you might be wondering about. Number one, why are we loading React from super simple dev instead of some official React URL? So, this just lets me control the version of React. If we loaded React from the official URL, you might get a different version of React than the one I'm using in this video, which might cause issues. So, for the video, we're going to use a super simple dev URL to make sure that we have the same version of React and you're able to follow along. The second thing you might be wondering is why are there two external libraries for React? React and React DOM. So, React is designed to be used in different places like websites and also mobile apps. So the creators of React decided to divide it into two external libraries. React which contains all the shared features that are used in both websites and mobile apps and React DOM which contain features that are specific to websites. So if we're using React to create websites, we need to load the React external library and the React DOM external library. If we were using React to create mobile apps, we would load the React external library and a different library called React Native. In this course, we're going to use React to create websites. So, we're going to load React and React DOM. Okay, so we learned that React is an external library. It's just a bunch of code that is outside of our computer and we're going to load it onto our website. The next part is React helps us create websites easier. So now let's learn how to use React. We'll go back to VS Code and we're going to scroll down and these two lines of JavaScript at the bottom sets up React. So let's go through this step by step. In the first line, we're using document.query query selector to get an HTML element from the website and put it into our JavaScript. As a review, this is a feature of JavaScript called the DOM or the document object model. Basically, JavaScript gives us this document object which sort of combines JavaScript and HTML together. It lets us get HTML elements from the page and put them into our JavaScript and it also lets our JavaScript modify HTML elements on the page. So the DOM or the document object sort of combines HTML and JavaScript together and it lets the two languages interact with each other. Don't worry, you don't need to know a lot about the DOM to learn React. I'm just explaining what this code does so you understand what's going on here. So the code document.query selector lets us get an HTML element from the page and put it into our JavaScript. Inside these brackets, we tell the computer which HTML element we want to get from the page. So if we start with a dot, this means we're going to look for a class. And here we're looking for the class js-container. Up here, this div element has the class js-container. So, it's going to take this element and put it into our JavaScript. And finally, we're going to save it inside a variable so we can use it later. Next, let's go to the second line of code and react.create create root basically sets up React. To set up React, we have to give it an HTML element. So, we're going to give it the element that we saved up here, which is this div element. So, basically the way this works is that this element is going to act as a container. Everything that we create with React is going to be displayed inside this element or inside this container. The reason React uses a container is because it keeps things organized. Everything inside this element will be controlled by React and React will not affect anything outside of this element. So it keeps things isolated and organized. So after we set up React with a container, we can start using the features of React. One feature of React is render. Render means to display something. So render lets us display something inside this container or inside this element. Now between the brackets of render, we're going to tell React what to display inside the container. So right now we told it to display the text, welcome to super simple dev react course. And if we go back to our website and open the tab for our website and after we open the console this time we're going to go to the elements tab. So this lets us see the HTML that's currently on the page. We're going to open this body element and inside we can see our container and you can see that react rendered or displayed the message welcome to super simple dev react course inside our container. So we'll go back to our code and that's how we set up and use react. First we give it a container and then we can display things like a message inside this container. Before we continue, let's review the rest of the code in this file to make sure that we understand every line of code. So, the HTML at the top here as well as the bottom here. This HTML is called the HTML structure. As a review, this is a standard structure that we follow when writing HTML. At the top, dock type HTML tells a computer to use a modern version of HTML. The HTML element represents a website. So all the code for our website should go inside the HTML element. Now every website is split into two sections. the head section and the body section. The head section generally contains things that are not visible on the page. For example, the title element sets the text at the top of the tab. So, this is not visible on the page. So, we put this inside the head. The body section generally contains things that are visible on the page. For example, the div element will be visible on the page. So we put it inside the body. Finally, we usually put our script elements at the bottom of the body because we want our HTML to be created first and then our JavaScript can modify the HTML. So that's a review of the HTML structure. This is a standard structure that we follow when writing HTML. So now we understand almost every line of code in this file. This is just the HTML structure that we have to follow. This is a container that we give to React to keep things isolated and organized. This is an example of an external library and this loads the React external library or loads the code for React. And this sets up and uses React. The last two lines that we haven't learned yet are these two lines right here. So here we're loading another external library. And this external library is called Babel. So again if I open this URL in my browser copy and in my browser going to create a new tab and at the top paste and press enter. You'll see that this website contains a bunch of JavaScript code and this is the code for another external library called Babel. So we'll go back to VS Code and let's learn what is the Babel external library. Babel is known as a JavaScript compiler. So basically translates other languages into JavaScript. So why do we need Babel? When using React, we actually don't use normal JavaScript. We use an enhanced version of JavaScript called JSX. JSX stands for JavaScript XML. It's the same as JavaScript, but we can also write HTML directly in our JavaScript code. So, it's just JavaScript with extra features. So, let's do an example of JSX to learn how to use it. Inside the script element at the bottom, we're going to create a new variable using const and let's call it button equals. And now let's create a button HTML element. So here we're going to type HTML directly less than button greater than and then less than/button greater than. So this is actually HTML code and we're writing it directly inside our JavaScript. So this HTML code creates a button and then inside our button we can put the text hello. So this code here is actually using JSX. So JSX works the same way as JavaScript except we can also write HTML directly in our JavaScript code. So, what does this code do? It's actually pretty straightforward. This code creates a new button element inside our JavaScript and then we save it in a variable. We can actually do this with normal JavaScript as well. We can use the DOM and we can create a button element in our JavaScript like this. So you can think of this JSX code as a shortcut for this JavaScript code. So that's JSX. JSX is an enhanced version of JavaScript. So it's the same as JavaScript, but we can also write HTML directly in our JavaScript code. So when using React, we usually use JSX instead of normal JavaScript because, as you can see, JSX is simpler. Now there is one problem with JSX which is our web browser doesn't understand JSX. It only understands normal JavaScript. In order to use JSX we need to translate it into normal JavaScript first and then our web browser can understand this code. To do that we use the Babel external library. Babel translates JSX into normal JavaScript so our web browser can understand it. To use Babel, we need to do two steps. First, we load the Babel external library, which is what we do here. And then when we want to translate something into JavaScript, we have to give the script element an attribute type equals text/babel. So this attribute tells Babel to translate all the code inside here into normal JavaScript. So that's what these two lines of code do. First, we load the Babel external library and then we tell Babel to translate the code from JSX into normal JavaScript so our web browser can understand it. So now we understand all of the code in our starting file. And again, this is the minimum amount of code that we need to set up React. Next, let's learn some more features of React. So, we'll scroll back down. And currently, we're using React to display some text inside this container. Now, in addition to text, we can also display HTML elements inside this container. So to do that, we're going to remove this string and instead we're going to give render an HTML element. So up here, we actually created an HTML element or a button. So we're going to give this to the render function. So here we're going to give it the button. And now it's going to display this button inside our container or inside this div here. Let's save and we'll open the browser and open the tab for our website. And you'll see it displayed the button with the text hello on the website. And if we check the elements tab, you can see that React displayed the button inside our container. We'll go back to our code. So that's what this code does. It displays an element inside this container. Now let's do another example. Let's display a different HTML element inside this container. So below this button, let's use JSX to create a paragraph element. So first we'll create a new variable using const and we'll name the variable paragraph equals and we'll create a paragraph element using the code less than p greater than less than /p greater than. So this HTML code creates a paragraph or a paragraph of text. inside our paragraph, let's just put paragraph of text. And now let's display this paragraph on our website. So inside render, instead of the button, we're going to render the paragraph and save. If we open our website, you can see it displayed a paragraph of text. If we go into the elements tab and we open this div container, we can see that React displayed this paragraph element inside this container. So let's go back to our code. And that's basically how we use React. We give React a container and then we can display an HTML element inside this container. Next, we're currently using React to display one element at a time on our website, which is not that useful. So now we're going to learn how to use React to display multiple elements on our website. So one thing we can't do is give render multiple elements. So this is not supported. We also can't save multiple elements inside a variable. This is also not supported. Instead, we need to use another HTML element called a div element. So, under our paragraph, let's create a new variable using const and let's name it div and make it equal. And we'll create an HTML div element using the code less than div greater than less than /d greater than. So this is the HTML code to create a div element. As a review, the div element represents a container. The purpose of a div element is to contain other elements like buttons and paragraphs. So that's actually why we used a div element up here. This element is a container. It's going to contain everything that we create using React. So let's go back down inside our div element. we can put other HTML elements like a button. So let's actually select this code and we'll copy and then inside this div paste. And let's also put a paragraph element inside our div. So we'll select this code for the paragraph element and we'll copy and our div paste. So this code works because a div is considered as one element. So we're just taking one element and saving it in one variable which is supported in JavaScript. The only thing special about this is that this one element can contain other elements inside. Next, we're going to give this div to the render function here. So, instead of the paragraph, we're going to give render our div and save. And if we check our website, you can see that React displayed multiple elements on the website, a button and a paragraph. If we look at the elements tab and open this div container, you can see that React displayed our div inside this container. Let's go back to our code. And that's how we display multiple elements on a website using React. First, we group the elements inside a div element. And then we render the div element. Before we continue, we're going to do some code cleanup. When we have multiple lines of HTML like this, a best practice is to add brackets around it. So, at the front, we're going to add an open bracket and at the end, a closed bracket and we're going to put the HTML on its own line. So, here we have JavaScript and HTML together. We're going to add a new line here by pressing enter. and we're going to put the HTML on its own line. Same thing here. Click here and press enter to put the HTML on its own line. Next, we have two elements that are inside a div. So, we're also going to give this line an indent by pressing tab. And then, we're going to give this line an indent by pressing tab. So that it's easy to see that these two elements are inside this div element. So this is how we should format our code when we have multiple lines of HTML. Another way to think about this is inside here you're actually just writing HTML normally. So don't worry the more that you use React the more you'll get used to this format. So let's save this file. Now that we learned the basics of React, let's talk about how React helps us create websites easier. If we look at this code, creating a website with React feels natural. It's a lot simpler than using the DOM feature in JavaScript. We can just create the HTML elements we want directly and then give it to React and React will display it on the website. Another benefit is JSX lets us find errors easier. For example, if I misspell button, it will actually tell me that these two don't match because this is an actual element rather than just text or a string. So, it makes it easier to find errors when we're coding. So, I'll add the O back. Another benefit is we can insert values inside our JSX elements. For example, inside this paragraph, we're going to type space and we're going to insert a value here by typing open curly bracket close curly bracket. And inside here, we can give it any JavaScript code. For example, 2 + 2. So this will calculate 2 + 2 and then insert it into this element. If we save and then check our website, we can see that it calculated 2 + 2 which is four and inserted it into this paragraph element. So we'll go back to our code and that's another benefit of using React. We can insert JavaScript code directly into our JSX elements. So this is similar to string interpolation where we can insert values into a string except here we're inserting values into actual HTML elements. So those are three ways that React helps us create websites easier. Number one, it's more natural. We can create the elements that we want and then just give it to React and it will put it on the website. Number two, it helps us find errors easier because these are actual elements. And number three, we can insert our JavaScript code into our elements. So, this helps us use JavaScript and HTML together, more easily. Now, React has many other features that helps us create websites easier, but we're going to learn those features later on as we go through the course. The last thing we're going to do is we're going to scroll up and we're just going to remove this example external library and save so that we just have the code that we need for React. And that's the end of this lesson. In this lesson, we learned that React is an external library that helps us create websites easier. We learned how to load the React external library. We learned how to set up React and use render. We reviewed the basics of HTML and JavaScript. We learned JSX, an enhanced version of JavaScript. We created elements directly with JSX. And we learned how to insert values into our JSX elements. Here are some exercises to help you practice what we learned in this lesson. You can find the solutions to these exercises in the video description. In this lesson, we're going to learn two of the most important features of React, which are components and props. To learn this, I actually prepared a project that we can do for this lesson. We're going to go to our browser and we can delete these extra tabs for now. And we're going to create a new tab. And at the top, we're going to go to super simple.dev/projects/ chatbot and press enter. This is a chatbot project. We can send a message to a robot up here and the robot will respond to our message. For example, we can click in here and type hello chatbot and then press send. And the robot will respond with hello, how can I help you? Now, if we scroll to the bottom of this page, we can also move the text box to the bottom by clicking this link. So, a lot of chatbot applications use this design where the text box is at the bottom. However, because we're watching a video, this text box might get cut off or it might be covered by the video progress bar. So, just for this video, we're going to click this again and we're going to start with a text box at the top. Next, this is a simple chatbot and currently it can only do three things. get today's date, flip a coin, and roll a dice. For example, up here, we can type, \"Can you get me today's date?\" and press send. And it will respond with today's date. And let's try typing, \"How about flip a coin?\" and press send. and it will respond with heads or tails. Finally, let's type okay, thank you and press send. And it responds with no problem. So, this is a chatbot project we're going to work on for the next few lessons. Now, this is a simple chatbot and it can only do these three things. But in the future, we can also switch this to a more powerful AI that can respond to any message we send. But for now, we'll just use this simple chatbot to learn React. Now, let's use React to build this chatbot project. We'll go back to VS Code and let's make a copy of React Basics. So, first we'll select this file and then rightclick, copy. And inside here, we're going to rightclick and paste. And let's rename this file. So, we'll rightclick and rename and rename it to chatbot.html and press enter. And let's close the React Basics files for now. So, we're going to start with the same code as the React Basics file, except we're just going to change the title up here. So, we'll remove React Basics and just change it to chatbot and save. And now, let's open this file in our browser. We'll rightclick, open with a live server. and it should say chatbot in the tab up here. So now we can close the React basics tabs which are these two here and we'll go back to VS Code. And now we're ready to begin the chatbot project. First we're going to learn one of the most important features of React called components. A component is just a piece of the website. For example, let's go back to our browser and open the final chatbot project. So looking at this project, we can split it up into different pieces. One piece can be the text box and the button at the top and another piece are each of these chat messages. So these are called components. A component is just a piece of the website. Now, when building websites, it's better to split up the website into pieces or components so that we can work on a small piece of the website at a time. Now that we know what components are, let's create our first component in React. So, we mentioned that one way we can split up this website is to have one component at the top for this text box and the button. So, let's create a component for this in React. We'll go back to our code and we'll scroll down and first let's remove the example button and paragraph that we used. So, we'll select this and remove it. And to create a component in React, we're going to use a function. So we'll type function. And now we're going to name this component. Since this piece of the website is for inputting a message and sending it to the chatbot, let's name this component capital C chat capital I input brackets and curly brackets. Now in React the component name must start with a capital letter. So make sure that chat input starts with a capital C. This is also known as Pascal case where each word in the name starts with a capital letter. Next this function will return some HTML. So we're going to type return and we're going to return the HTML for this piece of the website. So this piece of the website has a text box and a button. So let's type brackets and press enter between these brackets. And to create a text box, we're going to use the HTML element less than input greater than. And we also need to type less than /input greater than. Now you may notice that in normal HTML input doesn't need this closing tag. However, JSX is more strict than normal HTML. So, all elements need a closing tag, including input. Now, there's actually a shortcut we can use here. If there's nothing inside an element, we can actually remove the closing tag. And at the end of this opening tag, we can just type space and then slash. So, this code is a shortcut for this code. And this is called a self-closing element. So in JSX we have to either have a closing tag or use this self-closing element shortcut. Next, this piece of the website also has a button. So let's also create a button element using less than button greater than less than /button greater than. And inside this button we have the text send. And now we're going to get an error here because we're trying to return two values or two elements from this function. But we can only return one value from a function. To solve this problem, we can use a div element like down here to group these two elements together. So above this, let's create a div element. And at the bottom, less than /d greater than. And let's also add indents before these two lines. So we'll click here and press tab. And also click here and press tab. So this shows that these two elements are inside this div element. And now this code no longer has an error because we're returning one value from this function. Now that we created this component, let's learn how to display it on the website. If we scroll down, right now we're using React to display this div on the website. So all we have to do is to insert our component inside this div, and it will be displayed on the website. So one way to do this is to use curly brackets to insert something like we did before. So here we'll type curly brackets. And now we're just going to run this function capital C chat input and brackets. So this will run the function and it will return this HTML from the function and then the curly brackets will insert the HTML into the div and then display it on the page. So, as you can see, we can put any JavaScript code between these curly brackets. As long as this code results in a value, we can insert it into this HTML. Let's remove the button and the paragraph that we used as an example and save. And let's check our website. We'll open the browser and go to our chatbot project. And now we created the elements for the top section of the chatbot project, the text box and the send button. So don't worry about how it looks for now. Later in the course, we're going to style this with CSS and make it look like the final project. Let's go back to our code. And next, React has a special syntax we can use to insert a component. Instead of using curly brackets and running the function, we can type this code less than and then the name of the component capital C chat input greater than and then less than slash chat input greater than. So this is called the component syntax. This does the same thing as the code above. It runs the chat input function and then inserts the result into the HTML. If we save and we check our project, you'll notice that that syntax does the same thing and it creates another text box and button. Let's go back to our code. And again, this code does the same thing as this code. Now, this syntax has a big advantage. This actually looks like an HTML element. It has an opening tag and a closing tag. So, you can think of this like we're creating our own HTML element called chat input. HTML provides us with some default elements like div, input, and button. And now using React, we can actually create our own HTML element like chat input. Then we can use our own HTML elements to build the website instead of just the default HTML elements. And this is actually one of the main ideas of React. We can create our own HTML elements. So when using React, we should use this component syntax instead of running the component function directly because this syntax lets us create our own HTML element. And again, we can use the self-closing element shortcut like we did up here. If there is nothing inside this element, we can remove this closing tag. And inside the opening tag at the end, we can type space and slash. And now we can remove this example code above. And let's save and check our project. And that creates the top section of the chatbot project. So go back to VS Code. And we mentioned in the previous lesson that React helps us create websites easier. And this is another way that React helps us create websites easier. It lets us split our website into smaller pieces or components. And this lets us work on a small piece of the website at a time. Before we create the rest of the project, we're going to improve our code a little bit. First, notice that in this component, we're using a div to group these two elements together. However, this is also going to insert an extra div element into our website. So, if we go to our website and rightclick and click inspect and we're going to go to the elements tab and we're going to go to our container here and we're going to expand it. So, notice here that we have a bunch of extra divs on this website. So, what if we don't want to insert these extra divs? What if we just want to insert the text box and the button on our website? Let's go back to our code and learn how to do that. React has another way to group elements together called a fragment. To use a fragment, we can remove the word div and div from the closing tag and just have a less than greater than and a less than slashgreater than. So this is called a fragment and it groups the two elements together. So we can return it from the function but it won't insert an extra div. So if we save this code and then go to our website and take a look at the HTML, you'll notice now we have one less extra div on the website. Let's go back. And we can also use a fragment down here. If we don't want to insert this extra div, we can remove it and remove it at the bottom and just use a fragment. If we save and check the website, now we no longer have those extra divs. We have our container and we just inserted the text box and the button. So that's fragments. It allows us to group elements together without creating an extra div. Let's go back to our code. And since this variable no longer contains a div, let's rename it. So right now we're building a chatbot application or an app. So let's rename this variable to app instead. And here as well, we're going to render the app and save. So again in React when returning multiple elements or saving multiple elements we can use a fragment to group them together and this makes our HTML a little bit cleaner because it doesn't create an extra div element. Next another improvement we can make is to add a placeholder to the text box at the top. So the gray text inside the text box is called a placeholder. It tells us what to type inside the text box and when we start typing it will disappear. To create a placeholder we give this input element an attribute. So at the end we're going to type the attribute placeholder equals double quotes. And then inside these double quotes, we're going to put the text that we want, which is send a message to chatbot. If we save this code and look at our website, now we have a placeholder in the text box and when we start typing in it, it will disappear. So the placeholder is working. Now, there is one problem here, which is if we remove this text, you'll notice that this placeholder is too long and it's getting cut off. To fix this, let's make this text box wider. We'll go back to our code, and to make this input wider, we're going to give it another attribute. So, at the end, we'll type another attribute called size equals double quotes. And this sets how many characters can fit in this input. By the way, a character is just a letter, number, or symbol. Let's set the size to 30 characters. And save. And take a look. Okay, so that looks pretty good for now. Again, don't worry about how this looks. We'll style it later in the course using CSS. So, we just created our first component or our first piece of the website, which is the section at the top. Now, let's get some practice and create more components. Let's go back to the final chatbot project and let's ask ourselves, how can we split up the rest of this website into pieces? Another piece of this website could be one chat message here. So, let's create a component for this piece of the website. We'll go back to VS Code. And to create a component, we're going to use a function. So, down here, let's create a function. And let's name it capital C chat, capital M, message, brackets, and curly brackets. So remember a component name must start with a capital letter and we use Pascal case. So each word starts with a capital letter. Now inside this function we're going to return the HTML for this piece of the website or this component. So let's also type brackets and enter. So we can write the HTML on multiple lines. And now each chat message has two things, some text and a profile image. Since we have multiple things inside this component, let's group them together using a fragment. So we can return one value from this function. So we'll type less than greater than enter and then less than /grater than to create a fragment. And now inside here, each message has some text. So let's create the first chat message in our project. We'll go back to the final project and let's just copy paste the text from the first message here, which is hello chatbot. So we'll select this and then copy by pressing control C on Windows or command C on Mac. And then inside our code in the chat message component, we're going to paste by pressing controlV on Windows or commandV on Mac. And let's fix the indent by pressing tab at the start. Next, each chat message has a profile image. To create an image, we can use an HTML element called img. So let's create a new line and we're going to type less than img greater than and then less than / img greater than. So remember that in JSX every element has to have a closing tag. And again we can use a self-closing element shortcut like we did down here. If there's nothing inside this element, we can remove the closing tag and then just add a space and a slash at the end of the opening tag. And now we have the two things that we need for each chat message, the text and an image. Next, we need to tell the computer which image to load. Right now, if we look at our final chatbot project, we have two images that we use. But we currently don't have these in our project. So, let's download them. We're going to rightclick this first image and then click save image. And we're going to find the folder that contains all of our code. So, for me, it's on the desktop and it's in the folder React-Course. And we're going to save it inside this folder. And same thing for this robot image. We're going to rightclick and click save image, go to the React-Course folder, and we're also going to save the robot image. And now, if we look at our code, we should have two images inside our project, user.png and robot.png. And now let's go back to our code. To load an image on the website, we need to tell the computer which image to load. To do that, we're going to give this image element an attribute called src or source equals double quotes. And inside these double quotes, we're going to tell the computer which image to load. For the first chat message, the image is the user image. So let's type this file name user.png. So this will look for a file called user.png beside the current HTML file. This is the current HTML file. So we'll look for user.png beside it which is right here. And then it's going to load this image on the website. Okay. So we created a component for a chat message. Now, let's insert this component on the website. We're going to scroll down to the app and let's insert this component using the component syntax like we did up here. So, we'll type a new line and type less than and then the name of the component which is capital C chat capital M message. And currently we don't have anything to put inside this component. So we use the self-closing element shortcut like we did up here. So now let's save and check our website which is this tab and let's close the console so we can see it. And we created a chat message. However, we have a few problems here. The first problem is that the profile image is too big. To make it smaller, we're going to go back to our code and inside the img element, we're going to give it another attribute called width equals double quotes. And let's try setting the width to 50 and save. And then check our website. And that looks close enough. Another problem is the chat message is appearing on the same line as the chat input. But in the final project, we want it to appear below. To fix this, we'll go back to our code and inside the chat message component, instead of using a fragment to group these elements together, we're going to change it back to a div. So inside we'll type div and inside here slash div. The reason we're using a div is because in HTML a div is known as a block element. A block element will always take up an entire line by itself. So if we group this in a div element, instead of appearing beside the chat input, the div is going to take up an entire line by itself. So it's going to take up the entire line under the chat input. So let's save this code and then check our website. So now this div is taking up this entire line. If we rightclick and click inspect and then click this arrow icon in the top left and then click on this div, you can see that this div now takes up this entire line. So now we have the layout that we want. So in React, we still use divs for layout purposes. If you want to learn divs, layout, and HTML in more detail, you can check out my HTML and CSS full course in the video description. So now we created our first chat message. Next, let's create the second chat message. We'll go back to our code and instead of creating a whole new component, we can actually reuse our chat message component. Components are actually designed to be reusable. To reuse this component, we don't want the message to be hello chatbot every time. We want to be able to display different messages in this component. To do that, we can give our component an attribute. So down here, we're going to go to the chat message component and we're going to give it an attribute. So this works just like HTML attributes. We're going to give our attribute a name. Let's call it message equals double quotes. And inside these double quotes, we're going to give the attribute a value. Let's put the text for the first message which is hello chatbot. So let's select this code and then copy and we're going to paste it inside here. So now we have an attribute called message with a value hello chatbot. So again you can see that this syntax looks like HTML. We can even add our own attributes. Now that we added this message attribute, how do we access it inside this component and use it? To do that, we're going to use a feature called props. Every component function gets one parameter up here called props. This props parameter is an object and it contains all the attributes that we give to this component. So up here, let's actually console.log props to see what it looks like. Let's save and then open our website and check the console. And you'll see that props is an object and it contains the attributes that we gave to our component. So here we have the message attribute and it has a value hello chatbot. So the attribute name is saved as a property and the attributes value is saved as a value of this object. So let's go back to VS code and using this props object we can access our attributes. By the way props is short for properties. We call this props because the attributes are saved as properties in this object. So now to access the message attribute we can remove this and type props dot and the attribute name which is message and let's save this in a variable so we can use it later. So at the front we'll create a variable using const name name it message equals props dossage and we'll add a new line to separate the code a little bit. Now instead of displaying hello chatbot every time let's display whatever is in the message attribute. So we'll remove this and let's insert this variable into this element. To do that we can use curly brackets and type the variable name message. So again we can put any JavaScript code between these curly brackets and as long as it results in a value it will insert it into this element. So now let's save and we'll check the website. And it displays a message hello chatbot. That's the message attribute that we gave it. Let's go back to our code. So that's props. Just like a normal HTML element, we can give attributes to our component and then access these attributes using this props object. So props are really useful because props make our component reusable. For example, let's try creating the second chat message. To do that, we can just create another chat message component. So down here, let's type less than chat message/grater than. And we just need to give it a different message attribute. So here we'll give it an attribute message equals double quotes. And we'll copy paste the second message in the chatbot project. We'll go to our browser and go to the chatbot project and let's copy and paste this second message. We'll select it and then copy and inside our code in the message attribute we're going to paste. So this will save the message hello how can I help you inside props and then we get it out of props and insert it into the component. Let's save and check the website and go to our tab. And now we created the second chat message. So let's go back to our code. And you can see that props make our component reusable. We can reuse this component, but just give it a different attribute or prop and it will display a different message. Let's get some practice and use props to create two more chat messages. Feel free to pause if you want to try it yourself first. So down here, let's create our third message using less than chat message/grater than. and we'll give it a message attribute equals double quotes and we'll copy paste the third message. We'll go to the chatbot project and select this third message and then copy. And in our code inside the attribute, we're going to paste. And finally, let's create the fourth message lesson chat message slashgreater than and then the message attribute equals double quotes and we'll copy paste the fourth message which is this one. So don't worry if your messages are different from mine. We're just doing an example. So we'll select this and copy. And inside here, we're going to paste and save. And now, if we check our website and go to our tab, you'll see that we now have four chat messages in our project. So, that's how we use props to reuse the chat message component. Next, in the final chatbot project, notice that these two messages are different. These two messages are from the chatbot. So there are two differences here. The profile image is a robot and the image is on the left. To create this, we can add another prop to chat message. Let's go back to VS Code and for each chat message, we're going to add another attribute. And let's call this attribute the sender equals double quotes. This attribute tells us who sent the message. And we can use this to determine which image to load and where to place the image. So if we send the message, let's make the sender the user. And for the second chat message, we're going to add another sender attribute equals double quotes. And the second message is from the chatbot. So let's make the sender attribute the robot. And we'll do the same thing for the third and fourth message. We'll give it a sender attribute. The third message is from the user. So let's make the sender user. And the fourth message sender equals double quotes. This message is from the robot. So let's make the sender robot. Next, let's access the sender attribute inside our component. To do that, all the attributes are saved inside this props object. To access the sender attribute, we can type props sender. So this gives us the value of the sender attribute which is either user or robot. So let's save this in a variable so we can use it later. Type const and let's call it sender equals props. So now that we have the sender attribute, let's use it to decide which profile image to load and where to place this image. To do that, we can just use an if statement. So inside here, we can type if brackets and curly brackets. And inside these brackets, we're going to check if the sender is equal to the string robot. By the way, by default, if the attribute just has double quotes like this, the value is a string. So here the value is going to be the string user or the string robot. So now inside our component, if the sender is the robot, we're going to return some different HTML. So let's type return brackets so we can write this HTML on multiple lines. And let's just copy paste the HTML from down here and modify it. So we'll select this HTML and then copy and then inside this return we're going to paste. And let's also select these lines and press tab to fix the indenting. So the first thing we need to change if the sender is a robot is that we want to load the robot image instead. So, we already downloaded the robot image here. To load it, we're just going to change the src attribute or the source attribute of this image. So, we're going to change this from user to robot.png. And we also want this image to be on the left. So, let's just move this image before the message. So we'll select this code and then cut by pressing control X on Windows or command X on Mac and then before the message we're going to paste by pressing controlV on Windows or commandV on Mac and we can remove this extra new line. So as you can see inside a component we can use any JavaScript feature like if statement and we can return a different HTML and whatever we return will be inserted inside the element here. So now let's save this code and then check our website and then open our tab and you can see that now we have two messages from the chatbot. that loads the robot image and it puts the image on the left. We'll go back to our code and using this sender prop, we're able to reuse this component to create a chat message from the robot. So again, props make our component reusable. And that's it. If we scroll down, using components, we split up the website or the app into smaller pieces like the chat input section at the top and each chat message. And we created all the HTML that we need for this project. The last thing we're going to learn in this lesson are some shortcuts that are commonly used in React, and we can use these to clean up our code. First, let's scroll up to the chat message component. So, instead of doing con message equals props dossage, we actually have a shortcut for this in JavaScript. So, down here we can just type const curly brackets and inside we can type message and make it equal to props. So this takes the message property out of this object and saves it in a variable called message. So this does the same thing as this line above. This code is a shortcut for this code. And this shortcut is called dstructuring because we're taking stuff out of this object. We're deconstructing it. We can also use this shortcut with the sender property to add another property to take out of this object. After the first property, we can type comma and the second property sender. So this will get the message property and the sender property out of this object and it will save it in a message variable and a sender variable. So this line of code is a shortcut for these two lines above. So now let's actually turn these two lines into comments or comment out these lines. At the front we're going to type double slash and at the front here we'll type double slash. By the way, if we start with double slash, it will turn this code into comments and it will be ignored by the computer. So, we'll just keep this here as a reminder that this is a shortcut for these two. Next, JavaScript has an even shorter shortcut for this. Since props is a parameter up here, we can just dstructure it directly up here. So here instead of the props object we can just type curly brackets directly and then type message and sender. This takes the message and sender properties directly out of the first parameter and then saves them in a variable called message and a variable called sender. So it does the same thing as this code down here, but it's an even shorter shortcut. We're dstructuring the parameter directly at the top. So this shortcut is used a lot in React tutorials and documentation. So it's useful to know how this works. So let's comment out this line here. At the front, we'll type double slash. So we remember that this code is a shortcut for this line of code and these two lines of code. Now let's save and check our website to make sure that everything is still working. So that looks good. We'll go back and that is the dstructuring shortcut. It allows us to take properties directly out of an object. Next, we're going to learn how to use if statements directly inside JSX. So currently we have some JSX here and we put an if statement outside of this JSX. However, this means we're duplicating some code like the div and the message. To make this code more reusable, we can actually move this if statement directly inside the JSX down here. So what we want to do is if the sender is a robot, we want to put the image before the message. So down here, let's go before the message and press enter. And we're going to type curly brackets. And we're going to insert the if statement directly inside here. So here before the message we want to do something like if the sender is equal to the string robot we're going to insert this image. However we can't actually use the word if inside of these curly brackets. Instead we need to use another feature of JavaScript called a guard operator or and. In JavaScript, you can write value one and value two. If value one is true, then the result will be value two. So this works just like an if statement except we can write it on one line and it results in a value. So if you want to learn more about this feature, I cover it in the booleans lesson of my JavaScript course and you can check out that in the video description. For now, the only thing we need to know is we can use and as sort of an if statement in our JSX. So, first let's remove this and then we're going to use and to insert this if statement directly inside the JSX. So, the first value is going to be our if condition which is sender equals the robot. So we'll check if the sender is equal to the string robot and then we're going to use and. So if this is true, the result is going to be the second value here. So here if the sender is a robot, we want to insert the robot image. So let's just copy and paste this code. We're going to select this and then copy it. And then down here after and we're going to paste. So again the way this works is if the value on the left is true then the result will be the value on the right. So this and is sort of a shortcut for this if statement and it lets us insert if statements directly inside our JSX. So let's actually comment out this if statement out here. So we remember that this code is a shortcut for this code. So here before the if statement we'll type slash and star and after the if statement we'll type star and slash and remove the indent. So this is known as a multi-line comment. All the code between these two stars will be ignored by the computer. So now let's save and check our website. And as you can see, if the sender is a robot, we're going to add an image on the left before the message. So now, one problem here is that we're also showing the user's profile image at the back, but we only want to show one profile image. We'll go back to our code and here we only want to show the user profile image if the sender is the user. So let's insert another if statement down here. Feel free to pause this video if you want to try it yourself first. So at the front we'll type open curly bracket. At the end a close curly bracket. And at the front we're going to type the if condition. So we'll check if the sender is equal to the string user and then we'll type and. So if this is true, then we will show this image. If this is not true, we will not show this image. So this code is a shortcut for this code. Let's save and check our website. And it works. The robot image is on the left and the user image is on the right. So let's go back. Using the guard operator or and we can insert an if statement directly inside our JSX. Next, we're going to do some code cleanup. So, let's scroll up and we're going to go to the chat input component first. So, you notice that in here, this line is a little bit too long. To make our code easier to read, we can actually put each attribute on its own line. So, here we'll type enter to put placeholder on its own line. And here we'll type enter to put size on its own line. And let's also type enter at the back. So the attributes are on their own lines. And then let's add an indent in front of these attributes by pressing tab and pressing tab. This makes it clear that these attributes are part of this element. And we also want to make sure that these two are vertically aligned. This makes it easy to see where this element starts and where it ends. Next, let's scroll down to the chat message component. And notice that these two lines of code with the and are also a bit too long. To improve this, we can surround this value with brackets. So we'll type open bracket and at the end close bracket and then we can put this code on its own line. So here we'll type enter and at the end we'll type enter. So this will still have the same value, but the brackets allow us to put the code on multiple lines. We'll do the same thing for the second image. We'll surround it in brackets, open bracket, and close bracket. And we'll put this value on a separate line so that it's no longer too long. Next, let's scroll down even more to the app variable. And you'll notice that these lines are also a bit too long because of the attributes. Again, we can put each attribute on its own line. So here we'll put message on its own line and sender on its own line. And we'll put the end of the component on its own line so that this is vertically aligned with this. And let's also add indents before the attributes. So we'll press tab and tab. So it's easy to see that these attributes are part of this component. And we'll do the same thing for the other three chat messages. So we'll put this on its own line and add indents. And put this on its own line. Add indents. And put this on its own line. And add indents. and save and check our website and everything should still work because we just changed the formatting of our code. So let's go back and that's how we avoid our lines being too long. We can put each attribute on its own line and we can also surround a value with brackets and put it on its own line. Finally, down here, instead of using a variable to save our app, a best practice is to use a component to create this app. So here, let's create a component using function. And we'll name it capital A app brackets and curly brackets. And then this component will return all of this HTML. So we'll return brackets so we can write it on multiple lines. And we're going to move all this code up here. So let's select this code and we'll cut. And inside the return we're going to paste. And we can select these lines and press tab to fix the indenting. So now we're going to use this component instead of the variable to create our app. So down here, let's remove this variable. And then inside render, we're going to create the app. We can type less than capital A app greater than and then less than slash app greater than. So this creates an entire chatbot application. And then we give this to React to display on the website. And again since there's nothing inside this component, we can use the self-closing element shortcut. So we can remove this closing tag. And then at the end here we can type space and slash. And now let's save and check our website. And it displays the app on the website. Let's go back to our code. So a best practice is to use a component called app to create the website because it gives us access to extra features of components like props. And also notice that we can have components inside a component. So this lets us split up a website into smaller and smaller components or smaller and smaller pieces. So again, React helps us create websites easier because it lets us work on a small piece of the website at a time. In the next lesson, we're going to learn a very important feature of React called state. State lets us make our website interactive and it will let us add new chat messages to our website. And that's the end of this lesson. In this lesson, we learned that a component is just a piece of the website. We also learned that components let us create our own HTML elements. We started the chatbot project. We split the chatbot into chat input and chat message components. We learned props which let us insert values into components and make components reusable. We learned the dstructuring and guard operator shortcuts. We did some code cleanup and split longer lines into multiple lines. And we created an app component which represents the entire application. Here are some exercises to help you practice what we learned in this lesson. Good job on finishing this React tutorial. This is the first two lessons of my React full course. If you want to continue learning with me, here are a few options. I'll be releasing a lesson each Monday until the course is released. to get all the lessons right away. You can also check out my React Premium course where you'll get all the lessons ads free broken down into small videos as well as additional lessons and more projects that are not in the public React course. Currently, the premium course contains 11 lessons and I'll be adding more lessons in the future. In the premium course, you can also get a certificate of completion. create comments or questions on specific topics, get progress tracking, search and course notes. You can also check out my membership which has a public React course ads free as well as AI tutorials, backend tutorials, and more. Thanks so much for watching this React tutorial, and I'll see you in the next one."
}