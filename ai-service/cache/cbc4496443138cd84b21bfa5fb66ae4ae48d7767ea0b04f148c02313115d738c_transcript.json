{"transcript": "I've been writing code for a decade now and I've used many different programming languages along the way getting up and running quickly with a new programming language is a skill in and of itself I've had to do this many different times C Java JavaScript python go and the list goes on I started using go heavily about five years ago when I was getting into the devops in Cloud space go allowed me to build these lightweight web services which really gives you an advantage especially in that space on top of that the ability to compile my code and run it on any OS was really helpful when sharing code with my teams we now have features like generic somehow on top of that we've also increased the performance of a very performant language amongst a bunch of other things the intention of this video is to teach you the fundamentals of go just enough so that you can get started building things and becoming productive this is not meant to be a full language specification or some comprehensive course but if you do take the time to watch the entire video by the end of it you should be able to get up and running and start building something first we're going to go over our file and project structure which will explain how we're actually going to go about running our code next we're going to review the basic syntax which you'll use in every go program that you write and then third part I'm going to focus a little bit on these user-defined types in golang it's something that you use all the time along with methods so I think it's really valuable in this type of format to talk about that before you're Off to the Races alright if you haven't installed go now's the time to do so I'll go ahead and throw the link in the description now that that's done let's jump in first let's talk a bit about our project structure now that I have go install the first thing that I want to do is create my go Basics directory after I do that I'm going to go ahead and jump into that directory and run go mod init this is how you initialize your project after go mod init this is where I provide a name for the module that I'm creating in this case it's going to be github.com go Basics the first file that we're going to create is our main.go file and in the beginning this is really the only file that you need in your project if you open that file you need a couple things to get up and running on the first line you want to add your package name in this case we're going to call it package main package main is common pretty much across all go projects the next thing that you need is your funk Main this is the main function of your app and where all the code that you want to execute is actually going to be run now if you back out of this file you can go ahead and run this by saying go run main.go now it's great that we're able to run a single file but oftentimes in projects we want ways to decouple and separate our code you can do so with go by separating your code into different files under the same package name so let's go ahead and create another file here now to run our entire project with an additional file I can't run go run main.go instead I have to use go run star.go this is really useful when wanting to decouple your code in your beginning go projects now let's jump into some basic syntax that you're going to use across the board in all of your golang projects so we have our package Main and our Funk main which you're going to see is a common theme across the whole video at the top we already talked about the package declaration which is required in each go file in this case we have package main here the next stage you have these these import statements you can do an individual import which Imports libraries from go standard library or custom modules that have been created by the community you can also do this in a multi-import fashion instead of declaring each individual import on its own now let's talk about variables the most common way you create a variable and go is with this colon equal syntax so in this case I say what the name of my variable is I do colon equals and then I give my variable some type of value this is really nice and kind of adds to the dynamic feel of a statically typed language ligo which if you're coming from JavaScript or python will feel pretty natural the longer way to declare variables is with the VAR keyword you can say VAR then Supply the name of my variable and then give it a type you can later assign the value of that variable by saying the name of your variable an equal sign notice it's without the colon and then supplying the value of your variable the next thing that you're going to be using and coming across all the time is arrays and slices really more so the ladder with slices but I have a raise here just to give you an idea of the difference the main difference between an array and a slice in golang is that arrays are of a fixed size so I can declare a variable name and then I can give it a size parameter in the curly brackets with a specific type that's going to be contained within that array and then I can fill that array with up to that many values the difference here with slices is that slices are dynamic meaning I can declare a variable without defining a size and go we'll go ahead and adapt the size to meet my needs next let's talk about maps maps are simply a key value type of store in golang think of digged in python or object in JavaScript you can declare a map by assigning it to a variable you get the name of that variable colon equals and then Supply a make which will initialize your map and you want to give it a type for both the key and the value like so you can access and assign values in a map like so the next thing you're going to use all the time is loops and go has some different types of Loops for different circumstances so let's jump into that first you have your idiomatic for Loop which is pretty much the same across all C based languages while go does not have a while loop you can use four like a while loop like so and anytime you have to look over any type of slice which is a lot of the time you can use the four Range Loop which is defined as follows and last but not least if you omit all of the conditionals you can actually Define an infinite Loop by just using four and then open and closing curly bracket with whatever code you want to run infinitely in between those two brackets the next thing that we're going to be using all the time in our go projects is conditional logic of some sort golang has a couple constructs for supporting this the first of which being your common if else statements this is pretty much what you would expect from other languages go also supports switch statements in this switch statement we're actually just figuring out what operating system we're running on this is basically just a simpler way to chain a bunch of if-else statements and a little bit cleaner of a syntax now last but certainly not least is error handling with go this is something that is a bit controversial and not a lot of people like but I'm telling you now it honestly has way more benefits than it does negatives especially coming from a language though like python or JavaScript where error handling isn't really addressed in an amazing way golang brings error handling to the front in this example we're just reading a file and you'll notice this pattern and go that when you use a standard Library function or even a community-based function you'll get a value and an error that's returned all you do next is evaluate that error with an if statement and you'll see this part a ton if error doesn't equal nil then log out my error again this is a part that not a lot of people love but honestly you get used to it fairly quickly in this example we open a file and then go about reading that file the main part that I want you to pay attention to here is the error that we display after we run our file [Music] all right let's hop into our third item which is discussing types and go now go has all of its base types right but that's not really what I want to talk to you about here again the goal is to get you up and running and productive as quickly as possible that in mind I'm going to actually talk to you about how you go about defining your own types especially the most common ones that you actually use in your real programs as you write them one of the most common if not the most common type you're going to Define in all of your go programs is a struct a struct is simply a type that you can Define that has keys and expect some sort of value one of the nice things about a struct is that I can then assign methods to that struct this is the closest thing that you're going to find to kind of an object-oriented type of flow in golang a method function is defined as follows as you can see here you can Define functions that don't actually return anything or as you'll see with this function you can Define methods that return both a value and an error now Strokes obviously aren't the only types that you can Define it's just the most useful one and remember we're just trying to get up and running you can define a bunch of other types as well the need for those types will arise as you go through your project and that it's kind of easy to discover once you get into the flow of things now the best way to make sure that all these Concepts really sink in is of course to build something yourself if you'd like to check out a great starter project that I recommend to everyone who kind of comes to me and asks hey what should I be doing what project should I be working on check out the link to this video where I actually cover a go project that you can use to get up and running and start solidifying some of these Concepts in your brain now obviously there's a lot of stuff that we didn't cover interfaces how to actually cross compile we didn't go in depth with modules amongst a ton of other stuff not even mentioned all the amazing concurrency features that golang has comment below if there's something specific that you'd like us to go in depth on and if you enjoyed the video or learned anything at all please like subscribe we really appreciate it see you guys in next one"}